"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createContactSchema = exports.updatePasswordSchema = exports.updateCredentialSchema = exports.createCredentialSchema = exports.credentialUsername = exports.credentialPassword = exports.credentialLabel = exports.updateManagedLinodeSchema = exports.sshSettingSchema = exports.createServiceMonitorSchema = void 0;

var _yup = require("yup");

const createServiceMonitorSchema = (0, _yup.object)().shape({
  label: (0, _yup.string)().required('Label is required.').min(3, 'Label must be between 3 and 64 characters.').max(64, 'Label must be between 3 and 64 characters.'),
  service_type: (0, _yup.mixed)().required('Monitor type is required.').oneOf(['url', 'tcp']),
  address: (0, _yup.string)().required('URL is required.'),
  timeout: (0, _yup.number)().required('Timeout is required.'),
  credentials: (0, _yup.array)().of((0, _yup.number)()).notRequired(),
  notes: (0, _yup.string)().notRequired(),
  consultation_group: (0, _yup.string)().notRequired(),
  body: (0, _yup.string)().notRequired().max(100, 'Body must be 100 characters or less.')
});
exports.createServiceMonitorSchema = createServiceMonitorSchema;
const sshSettingSchema = (0, _yup.object)().shape({
  access: (0, _yup.boolean)(),
  user: (0, _yup.string)().max(32, 'User must be 32 characters or less.'),
  ip: (0, _yup.string)(),
  port: (0, _yup.number)().min(1, 'Port must be between 1 and 65535.').max(65535, 'Port must be between 1 and 65535.')
});
exports.sshSettingSchema = sshSettingSchema;
const updateManagedLinodeSchema = (0, _yup.object)({
  ssh: sshSettingSchema
});
exports.updateManagedLinodeSchema = updateManagedLinodeSchema;
const credentialLabel = (0, _yup.string)().min(2, 'Label must be between 2 and 75 characters.').max(75, 'Label must be between 2 and 75 characters.');
exports.credentialLabel = credentialLabel;
const credentialPassword = (0, _yup.string)().notRequired().max(5000, 'Password must be 5000 characters or less.');
exports.credentialPassword = credentialPassword;
const credentialUsername = (0, _yup.string)().notRequired().max(5000, 'Username must be 5000 characters or less.');
exports.credentialUsername = credentialUsername;
const createCredentialSchema = (0, _yup.object)().shape({
  label: credentialLabel.required('Label is required.'),
  username: credentialUsername,
  password: credentialPassword
});
exports.createCredentialSchema = createCredentialSchema;
const updateCredentialSchema = (0, _yup.object)().shape({
  label: credentialLabel.required('Label is required.')
});
exports.updateCredentialSchema = updateCredentialSchema;
const updatePasswordSchema = (0, _yup.object)().shape({
  username: credentialUsername,
  password: credentialPassword.required('Password is required.')
});
exports.updatePasswordSchema = updatePasswordSchema;
const createContactSchema = (0, _yup.object)().shape({
  name: (0, _yup.string)().required('Name is required.').min(2, 'Name must be between 2 and 64 characters.').max(64, 'Name must be between 2 and 64 characters.'),
  email: (0, _yup.string)().required('E-mail is required.').min(6, 'E-mail must be between 6 and 100 characters').max(100, 'E-mail must be between 6 and 100 characters').email('Invalid e-mail address'),
  phone: (0, _yup.object)().shape({
    primary: (0, _yup.string)().nullable(true).notRequired(),
    secondary: (0, _yup.string)().nullable(true).notRequired()
  }).notRequired(),
  group: (0, _yup.string)().notRequired().nullable(true).min(2, 'Group must be between 2 and 50 characters.').max(50, 'Group must be between 2 and 50 characters.')
});
exports.createContactSchema = createContactSchema;