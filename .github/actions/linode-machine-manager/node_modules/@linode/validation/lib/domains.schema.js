"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateDomainSchema = exports.createDomainSchema = exports.importZoneSchema = void 0;

var _yup = require("yup");

const importZoneSchema = (0, _yup.object)({
  domain: (0, _yup.string)().required('Domain is required.'),
  remote_nameserver: (0, _yup.string)().required('Remote nameserver is required.')
});
exports.importZoneSchema = importZoneSchema;
const domainSchemaBase = (0, _yup.object)().shape({
  domain: (0, _yup.string)().matches(/([a-zA-Z0-9-_]+\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|XN--[a-zA-Z0-9]+)/, 'Domain is not valid.'),
  status: (0, _yup.mixed)().oneOf(['disabled', 'active', 'edit_mode', 'has_errors']),
  tags: (0, _yup.array)(),
  description: (0, _yup.string)().min(1, 'Description must be between 1 and 255 characters.').max(255, 'Description must be between 1 and 255 characters.'),
  retry_sec: (0, _yup.number)(),
  master_ips: (0, _yup.array)().of((0, _yup.string)()),
  axfr_ips: (0, _yup.array)().of((0, _yup.string)()).typeError('Must be a comma-separated list of IP addresses.'),
  expire_sec: (0, _yup.number)(),
  refresh_sec: (0, _yup.number)(),
  ttl_sec: (0, _yup.number)()
});
const createDomainSchema = domainSchemaBase.shape({
  domain: (0, _yup.string)().required('Domain is required.').matches(/([a-zA-Z0-9-_]+\.)+([a-zA-Z]{2,3}\.)?([a-zA-Z]{2,16}|XN--[a-zA-Z0-9]+)/, 'Domain is not valid.'),
  tags: (0, _yup.array)().of((0, _yup.string)()),
  type: (0, _yup.mixed)().required().oneOf(['master', 'slave']),
  soa_email: (0, _yup.string)().when('type', {
    is: type => type === 'master',
    then: (0, _yup.string)().required('SOA Email is required.'),
    otherwise: (0, _yup.string)()
  }).email('SOA Email is not valid.'),
  master_ips: (0, _yup.array)().of((0, _yup.string)()).when('type', {
    is: type => type === 'slave',
    then: (0, _yup.array)().of((0, _yup.string)()).compact().ensure().required('At least one primary IP address is required.').min(1, 'At least one primary IP address is required.'),
    otherwise: (0, _yup.array)().of((0, _yup.string)())
  })
});
exports.createDomainSchema = createDomainSchema;
const updateDomainSchema = domainSchemaBase.shape({
  domainId: (0, _yup.number)(),
  soa_email: (0, _yup.string)().email('SOA Email is not valid.'),
  axfr_ips: (0, _yup.array)().of((0, _yup.string)()),
  tags: (0, _yup.array)().of((0, _yup.string)())
});
exports.updateDomainSchema = updateDomainSchema;