"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UpdateAccountSettingsSchema = exports.UpdateGrantSchema = exports.UpdateUserSchema = exports.CreateUserSchema = exports.PaymentMethodSchema = exports.CreditCardSchema = exports.PaymentSchema = exports.ExecutePaypalPaymentSchema = exports.StagePaypalPaymentSchema = exports.updateOAuthClientSchema = exports.createOAuthClientSchema = exports.updateAccountSchema = void 0;

var _yup = require("yup");

const updateAccountSchema = (0, _yup.object)({
  email: (0, _yup.string)().max(128, 'Email must be 128 characters or less.'),
  address_1: (0, _yup.string)().max(64, 'Address must be 64 characters or less.'),
  city: (0, _yup.string)().max(24, 'City must be 24 characters or less.'),
  company: (0, _yup.string)().max(128, 'Company must be 128 characters or less.'),
  country: (0, _yup.string)().min(2, 'Country code must be two letters.').max(2, 'Country code must be two letters.'),
  first_name: (0, _yup.string)().max(50, 'First name must be 50 characters or less.'),
  last_name: (0, _yup.string)().max(50, 'Last name must be 50 characters or less.'),
  address_2: (0, _yup.string)().max(64, 'Address must be 64 characters or less.'),
  phone: (0, _yup.string)().max(32, 'Phone number must be 32 characters or less.'),
  state: (0, _yup.string)().max(24, 'State must be 24 characters or less.'),
  tax_id: (0, _yup.string)().max(100, 'Tax ID must be 100 characters or less.'),
  zip: (0, _yup.string)().max(16, 'Zip code must be 16 characters or less.')
});
exports.updateAccountSchema = updateAccountSchema;
const createOAuthClientSchema = (0, _yup.object)({
  label: (0, _yup.string)().required('Label is required.').min(1, 'Label must be between 1 and 512 characters.').max(512, 'Label must be between 1 and 512 characters.'),
  redirect_uri: (0, _yup.string)().required('Redirect URI is required.')
});
exports.createOAuthClientSchema = createOAuthClientSchema;
const updateOAuthClientSchema = (0, _yup.object)({
  label: (0, _yup.string)().min(1, 'Label must be between 1 and 512 characters.').max(512, 'Label must be between 1 and 512 characters.'),
  redirect_uri: (0, _yup.string)()
});
exports.updateOAuthClientSchema = updateOAuthClientSchema;
const StagePaypalPaymentSchema = (0, _yup.object)({
  cancel_url: (0, _yup.string)().required('You must provide a URL to redirect on cancel.'),
  redirect_url: (0, _yup.string)().required('You must provide a redirect URL.'),
  usd: (0, _yup.string)().required('USD payment amount is required.')
});
exports.StagePaypalPaymentSchema = StagePaypalPaymentSchema;
const ExecutePaypalPaymentSchema = (0, _yup.object)({
  payer_id: (0, _yup.string)().required('You must provide a payer ID.'),
  payment_id: (0, _yup.string)().required('You must provide a payment ID (from Paypal).')
});
exports.ExecutePaypalPaymentSchema = ExecutePaypalPaymentSchema;
const PaymentSchema = (0, _yup.object)({
  usd: (0, _yup.string)().required('USD payment amount is required.')
});
exports.PaymentSchema = PaymentSchema;
const CreditCardSchema = (0, _yup.object)({
  card_number: (0, _yup.string)().required('Credit card number is required.').min(13, 'Credit card number must be between 13 and 23 characters.').max(23, 'Credit card number must be between 13 and 23 characters.'),
  expiry_year: (0, _yup.number)().required('Expiration year is required.').typeError('Expiration year must be a number.').min(new Date().getFullYear(), 'Expiration year must not be in the past.').max(new Date().getFullYear() + 20, 'Expiry too far in the future.'),
  expiry_month: (0, _yup.number)().required('Expiration month is required.').typeError('Expiration month must be a number.').min(1, 'Expiration month must be a number from 1 to 12.').max(12, 'Expiration month must be a number from 1 to 12.'),
  cvv: (0, _yup.string)().required('Security code is required.').min(3, 'Security code must be between 3 and 4 characters.').max(4, 'Security code must be between 3 and 4 characters.')
});
exports.CreditCardSchema = CreditCardSchema;
const PaymentMethodSchema = (0, _yup.object)({
  type: (0, _yup.mixed)().oneOf(['credit_card', 'payment_method_nonce'], 'Type must be credit_card or payment_method_nonce.'),
  data: (0, _yup.object)().when('type', {
    is: value => value === 'credit_card',
    then: CreditCardSchema,
    otherwise: (0, _yup.object)({
      nonce: (0, _yup.string)().required('Payment nonce is required.')
    })
  }),
  is_default: (0, _yup.boolean)().required('You must indicate if this should be your default method of payment.')
});
exports.PaymentMethodSchema = PaymentMethodSchema;
const CreateUserSchema = (0, _yup.object)({
  username: (0, _yup.string)().required('Username is required.').min(3, 'Username must be between 3 and 32 characters.').max(32, 'Username must be between 3 and 32 characters.'),
  email: (0, _yup.string)().required('Email address is required.').email('Must be a valid email address.'),
  restricted: (0, _yup.boolean)().required('You must indicate if this user should have restricted access.')
});
exports.CreateUserSchema = CreateUserSchema;
const UpdateUserSchema = (0, _yup.object)({
  username: (0, _yup.string)().min(3, 'Username must be between 3 and 32 characters.').max(32, 'Username must be between 3 and 32 characters.'),
  email: (0, _yup.string)().email('Must be a valid email address.'),
  restricted: (0, _yup.boolean)()
});
exports.UpdateUserSchema = UpdateUserSchema;
const GrantSchema = (0, _yup.object)({
  id: (0, _yup.number)().required('ID is required.'),
  permissions: (0, _yup.mixed)().oneOf([null, 'read_only', 'read_write'], 'Permissions must be null, read_only, or read_write.')
});
const UpdateGrantSchema = (0, _yup.object)({
  global: (0, _yup.object)(),
  linode: (0, _yup.array)().of(GrantSchema),
  domain: (0, _yup.array)().of(GrantSchema),
  nodebalancer: (0, _yup.array)().of(GrantSchema),
  image: (0, _yup.array)().of(GrantSchema),
  longview: (0, _yup.array)().of(GrantSchema),
  stackscript: (0, _yup.array)().of(GrantSchema),
  volume: (0, _yup.array)().of(GrantSchema)
});
exports.UpdateGrantSchema = UpdateGrantSchema;
const UpdateAccountSettingsSchema = (0, _yup.object)({
  network_helper: (0, _yup.boolean)(),
  backups_enabled: (0, _yup.boolean)(),
  managed: (0, _yup.boolean)()
});
exports.UpdateAccountSettingsSchema = UpdateAccountSettingsSchema;