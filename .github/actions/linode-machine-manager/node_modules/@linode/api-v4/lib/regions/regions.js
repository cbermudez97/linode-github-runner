"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "Region", {
  enumerable: true,
  get: function () {
    return _types.Region;
  }
});
exports.getRegion = exports.getRegions = void 0;

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

var _types = require("./types");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getRegions
 *
 * Return a list of available Regions (datacenters).
 * The response will be paginated, but the number of
 * available regions is small enough that multiple
 * pages are unlikely to be necessary.
 *
 * Filters are not included, as none of the fields
 * in a Region response object are filterable.
 *
 */
const getRegions = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/regions`), (0, _request.setMethod)('GET'));
/**
 * getRegion
 *
 * Return detailed information about a particular region.
 *
 * @param regionID { string } The region to be retrieved.
 *
 */


exports.getRegions = getRegions;

const getRegion = regionID => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/regions/${regionID}`), (0, _request.setMethod)('GET'));

exports.getRegion = getRegion;