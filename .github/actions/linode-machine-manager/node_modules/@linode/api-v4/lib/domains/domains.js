"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importZone = exports.cloneDomain = exports.deleteDomain = exports.updateDomain = exports.createDomain = exports.getDomain = exports.getDomains = void 0;

var _domains = require("@linode/validation/lib/domains.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Returns a paginated list of Domains.
 *
 */
const getDomains = (params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * Returns all of the information about a specified Domain.
 *
 * @param domainId { number } The ID of the Domain to access.
 */


exports.getDomains = getDomains;

const getDomain = domainId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}`), (0, _request.setMethod)('GET'));
/**
 * Adds a new Domain to Linode's DNS Manager.
 *
 * @param data { object } Options for type, status, etc.
 */


exports.getDomain = getDomain;

const createDomain = data => (0, _request.default)((0, _request.setData)(data, _domains.createDomainSchema), (0, _request.setURL)(`${_constants.API_ROOT}/domains`), (0, _request.setMethod)('POST'));
/**
 * Update information about a Domain in Linode's DNS Manager.
 *
 * @param domainId { number } The ID of the Domain to access.
 * @param data { object } Options for type, status, etc.
 */


exports.createDomain = createDomain;

const updateDomain = (domainId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _domains.updateDomainSchema));
/**
 * Deletes a Domain from Linode's DNS Manager. The Domain will be removed from Linode's nameservers shortly after this
 * operation completes. This also deletes all associated Domain Records.
 *
 * @param domainId { number } The ID of the Domain to delete.
 */


exports.updateDomain = updateDomain;

const deleteDomain = domainId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}`), (0, _request.setMethod)('DELETE'));
/**
 * Clones a Domain.
 *
 * @param domainId { number } The ID of the Domain to clone.
 * @param cloneName { string } The name of the new domain.
 */


exports.deleteDomain = deleteDomain;

const cloneDomain = (domainId, cloneName) => (0, _request.default)((0, _request.setData)({
  domain: cloneName
}), (0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}/clone`), (0, _request.setMethod)('POST'));
/**
 * Imports a domain zone from a remote nameserver.
 *
 * @param domain { string } The domain to import.
 * @param remote_nameserver { string } The remote nameserver that allows zone transfers (AXFR).
 */


exports.cloneDomain = cloneDomain;

const importZone = (domain, remote_nameserver) => (0, _request.default)((0, _request.setData)({
  domain,
  remote_nameserver
}, _domains.importZoneSchema), (0, _request.setURL)(`${_constants.API_ROOT}/domains/import`), (0, _request.setMethod)('POST'));

exports.importZone = importZone;