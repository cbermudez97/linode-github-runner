"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteDomainRecord = exports.updateDomainRecord = exports.createDomainRecord = exports.getDomainRecord = exports.getDomainRecords = void 0;

var _records = require("@linode/validation/lib/records.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Returns a paginated list of Records configured on a Domain in Linode's DNS Manager.
 *
 * @param domainId { number } The ID of the Domain we are accessing Records for.
 * @param params { object }
 */
const getDomainRecords = (domainId, params) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}/records`), (0, _request.setParams)(params), (0, _request.setMethod)('GET'));
/**
 * View a single Record on this Domain.
 *
 * @param domainId { number } The ID of the Domain whose Record you are accessing.
 * @param recordId { number } The ID of the Record you are accessing.
 */


exports.getDomainRecords = getDomainRecords;

const getDomainRecord = (domainId, recordId) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}/records/${recordId}`), (0, _request.setMethod)('GET'));
/**
 * Adds a new Domain Record to the zonefile this Domain represents.
 *
 * @param domainId { number } The ID of the Domain we are accessing Records for.
 * @param data { object } Options for type, name, etc.
 */


exports.getDomainRecord = getDomainRecord;

const createDomainRecord = (domainId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}/records`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _records.createRecordSchema));
/**
 * Updates a single Record on this Domain.
 *
 * @param domainId { number } The ID of the Domain we are accessing Records for.
 * @param recordId { number } The ID of the Record you are accessing.
 * @param data { object } Options for type, name, etc.
 */


exports.createDomainRecord = createDomainRecord;

const updateDomainRecord = (domainId, recordId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}/records/${recordId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _records.updateRecordSchema));
/**
 * Deletes a Record on this Domain..
 *
 * @param domainId { number } The ID of the Domain whose Record you are deleting.
 * @param recordId { number } The ID of the Record you are deleting.
 */


exports.updateDomainRecord = updateDomainRecord;

const deleteDomainRecord = (domainId, recordId) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/domains/${domainId}/records/${recordId}`), (0, _request.setMethod)('DELETE'));

exports.deleteDomainRecord = deleteDomainRecord;