"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getIPv6Ranges = exports.getIPv6Pools = exports.shareAddresses = exports.assignAddresses = exports.allocateIp = exports.updateIP = exports.getIP = exports.getIPs = void 0;

var _networking = require("@linode/validation/lib/networking.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Returns a paginated list of IP Addresses on your Account, excluding private
 * addresses.
 *
 */
const getIPs = (params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ips`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * Returns information about a single IP Address on your Account.
 *
 * @param address { string } The address to operate on.
 */


exports.getIPs = getIPs;

const getIP = address => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ips/${address}`), (0, _request.setMethod)('GET'));
/**
 * Sets RDNS on an IP Address. Forward DNS must already be set up for reverse
 * DNS to be applied. If you set the RDNS to null for public IPv4 addresses,
 * it will be reset to the default members.linode.com RDNS value.
 *
 * @param address { string } The address to operate on.
 * @param rdns { string } The reverse DNS assigned to this address. For public
 * IPv4 addresses, this will be set to a default value provided by Linode if not
 * explicitly set.
 */


exports.getIP = getIP;

const updateIP = (address, rdns = null) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ips/${address}`), (0, _request.setData)({
  rdns
}, _networking.updateIPSchema), (0, _request.setMethod)('PUT'));
/**
 * Allocates a new IPv4 Address on your Account. The Linode must be configured
 * to support additional addresses - please open a support ticket requesting
 * additional addresses before attempting allocation
 *
 * @param payload { Object }
 * @param payload.type { string } The type of address you are requesting. Only
 * IPv4 addresses may be allocated through this endpoint.
 * @param payload.public { boolean } Whether to create a public or private IPv4
 * address.
 * @param payload.linode_id { number } The ID of a Linode you you have access to
 *  that this address will be allocated to.
 */


exports.updateIP = updateIP;

const allocateIp = payload => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ips/`), (0, _request.setData)(payload, _networking.allocateIPSchema), (0, _request.setMethod)('POST'));
/**
 * Assign multiple IPs to multiple Linodes in one Region. This allows swapping,
 * shuffling, or otherwise reorganizing IPv4 Addresses to your Linodes. When the
 * assignment is finished, all Linodes must end up with at least one public
 * IPv4 and no more than one private IPv4.
 *
 * @param payload { Object }
 * @param payload.region { string } The ID of the Region in which these
 * assignments are to take place. All IPs and Linodes must exist in this Region.
 * @param payload.assignments { Object[] } The ID of the Region in which these
 * assignments are to take place. All IPs and Linodes must exist in this Region.
 */


exports.allocateIp = allocateIp;

const assignAddresses = payload => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ipv4/assign`), (0, _request.setMethod)('POST'), (0, _request.setData)(payload, _networking.assignAddressesSchema));
/**
 * Configure shared IPs. A shared IP may be brought up on a Linode other than
 * the one it lists in its response. This can be used to allow one Linode to
 * begin serving requests should another become unresponsive.
 *
 * @param payload { Object }
 * @param payload.linode_id { number } The ID of the Linode that the addresses
 * will be shared with.
 * @param payload.ips { string[] } A list of IPs that will be shared with this
 * Linode. When this is finished, the given Linode will be able to bring up
 * these addresses in addition to the Linodes that these addresses belong to.
 * You must have access to all of these addresses and they must be in the same
 * Region as the Linode.
 */


exports.assignAddresses = assignAddresses;

const shareAddresses = payload => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ipv4/share`), (0, _request.setMethod)('POST'), (0, _request.setData)(payload, _networking.shareAddressesSchema));
/**
 * Displays the IPv6 pools on your Account.
 *
 */


exports.shareAddresses = shareAddresses;

const getIPv6Pools = params => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ipv6/pools`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params));
/**
 * Displays the IPv6 ranges on your Account.
 *
 */


exports.getIPv6Pools = getIPv6Pools;

const getIPv6Ranges = params => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/networking/ipv6/ranges`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params));

exports.getIPv6Ranges = getIPv6Ranges;