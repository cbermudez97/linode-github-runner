"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteFirewallDevice = exports.addFirewallDevice = exports.getFirewallDevice = exports.getFirewallDevices = exports.updateFirewallRules = exports.getFirewallRules = exports.deleteFirewall = exports.disableFirewall = exports.enableFirewall = exports.updateFirewall = exports.createFirewall = exports.getFirewall = exports.getFirewalls = void 0;

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

var _firewalls = require("@linode/validation/lib/firewalls.schema");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// FIREWALLS

/**
 * getFirewalls
 *
 * Returns a paginated list of all Cloud Firewalls on this account.
 */
const getFirewalls = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls`));
/**
 * getFirewall
 *
 * Get a specific Firewall resource by its ID. The Firewall's Devices will not be
 * returned in the response. Use getFirewallDevices() to view the Devices.
 *
 */


exports.getFirewalls = getFirewalls;

const getFirewall = firewallID => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}`));
/**
 * createFirewall
 *
 *  Creates a Firewall to filter network traffic. Use the `rules` property to
 *  create inbound and outbound access rules. Use the `devices` property to assign the
 *  Firewall to a Linode service.
 *  A Firewall can be assigned to multiple Linode services, and up to three active Firewalls
 *  can be assigned to a single Linode service. Additional disabled Firewalls can be
 *  assigned to a service, but they cannot be enabled if three other active Firewalls
 *  are already assigned to the same service.
 */


exports.getFirewall = getFirewall;

const createFirewall = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setData)(data, _firewalls.CreateFirewallSchema), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls`));
/**
 * updateFirewall
 *
 * Updates the Cloud Firewall with the provided ID. Only label, tags, and status can be updated
 * through this method.
 *
 */


exports.createFirewall = createFirewall;

const updateFirewall = (firewallID, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setData)(data, _firewalls.UpdateFirewallSchema), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}`));
/**
 * enableFirewall
 *
 * Convenience method for enabling a Cloud Firewall. Calls updateFirewall internally
 * with { status: 'enabled' }
 *
 */


exports.updateFirewall = updateFirewall;

const enableFirewall = firewallID => updateFirewall(firewallID, {
  status: 'enabled'
});
/**
 * disableFirewall
 *
 * Convenience method for disabling a Cloud Firewall. Calls updateFirewall internally
 * with { status: 'disabled' }
 *
 */


exports.enableFirewall = enableFirewall;

const disableFirewall = firewallID => updateFirewall(firewallID, {
  status: 'disabled'
});
/**
 * deleteFirewall
 *
 * Deletes a single Cloud Firewall.
 *
 */


exports.disableFirewall = disableFirewall;

const deleteFirewall = firewallID => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}`)); // FIREWALL RULES

/**
 * getFirewallRules
 *
 * Returns the current set of rules for a single Cloud Firewall.
 */


exports.deleteFirewall = deleteFirewall;

const getFirewallRules = (firewallID, params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}/rules`));
/**
 * updateFirewallRules
 *
 * Updates the inbound and outbound Rules for a Firewall. Using this endpoint will
 * replace all of a Firewall's ruleset with the Rules specified in your request.
 */


exports.getFirewallRules = getFirewallRules;

const updateFirewallRules = (firewallID, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setData)(data), // Validation is too complicated for these; leave it to the API.
(0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}/rules`)); // DEVICES

/**
 * getFirewallDevices
 *
 * Returns a paginated list of a Firewall's Devices. A Firewall Device assigns a
 * Firewall to a Linode service (referred to as the Device's `entity`).
 */


exports.updateFirewallRules = updateFirewallRules;

const getFirewallDevices = (firewallID, params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}/devices`));
/**
 * getFirewallDevice
 *
 * Returns information about a single Firewall Device. A Firewall Device assigns a
 * Firewall to a Linode service (referred to as the Device's `entity`).
 */


exports.getFirewallDevices = getFirewallDevices;

const getFirewallDevice = (firewallID, deviceID) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}/devices/${deviceID}`));
/**
 * addFirewallDevice
 *
 *  Creates a Firewall Device, which assigns a Firewall to a Linode service (referred to
 *  as the Device's `entity`).
 *  A Firewall can be assigned to multiple Linode services, and up to three active Firewalls can
 *  be assigned to a single Linode service. Additional disabled Firewalls can be
 *  assigned to a service, but they cannot be enabled if three other active Firewalls
 *  are already assigned to the same service.
 *  Creating a Firewall Device will apply the Rules from a Firewall to a Linode service.
 *  A `firewall_device_add` Event is generated when the Firewall Device is added successfully.
 */


exports.getFirewallDevice = getFirewallDevice;

const addFirewallDevice = (firewallID, data) => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}/devices`), (0, _request.setData)(data, _firewalls.FirewallDeviceSchema));
/**
 * deleteFirewallDevice
 *
 *  Removes a Firewall Device, which removes a Firewall from the Linode service it was
 *  assigned to by the Device. This will remove all of the Firewall's Rules from the Linode
 *  service. If any other Firewalls have been assigned to the Linode service, then those Rules
 *  will remain in effect.
 */


exports.addFirewallDevice = addFirewallDevice;

const deleteFirewallDevice = (firewallID, deviceID) => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/networking/firewalls/${firewallID}/devices/${deviceID}`));

exports.deleteFirewallDevice = deleteFirewallDevice;