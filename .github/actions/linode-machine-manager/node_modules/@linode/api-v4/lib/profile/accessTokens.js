"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deletePersonalAccessToken = exports.updatePersonalAccessToken = exports.createPersonalAccessToken = exports.getPersonalAccessToken = exports.getPersonalAccessTokens = void 0;

var _profile = require("@linode/validation/lib/profile.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getPersonalAccessTokens
 *
 * Returns a paginated list of Personal Access Tokens currently active for your User.
 *
 */
const getPersonalAccessTokens = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/profile/tokens`));
/**
 * getPersonalAccessToken
 *
 * Retrieve a single Personal Access Token.
 *
 * @param ticketId { number } the ID of the token to view
 *
 */


exports.getPersonalAccessTokens = getPersonalAccessTokens;

const getPersonalAccessToken = id => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/tokens/${id}`));
/**
 * createPersonalAccessToken
 *
 * Creates a Personal Access Token for your User.
 * The raw token will be returned in the response. You may create a token with at most the scopes of
 * your current token. The created token will be able to access your Account until the given expiry,
 * or until it is revoked.
 *
 * @param data { Object } Token request object
 * @param data.scope { string } The scopes to create the token with. These cannot be changed after creation,
 * and may not exceed the scopes of the acting token. If omitted, the new token will have the same
 * scopes as the acting token.
 * @param data.expiry { string } Datetime string indicating when this token should be valid until.
 * If omitted, the new token will be valid until it is manually revoked.
 * @param data.label { string } String to identify this token. Used for organizational purposes only.
 *
 */


exports.getPersonalAccessToken = getPersonalAccessToken;

const createPersonalAccessToken = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/tokens`), (0, _request.setData)(data, _profile.createPersonalAccessTokenSchema));
/**
 * updatePersonalAccessToken
 *
 * Change the label or expiry date of a Personal Access Token
 *
 * @param tokenId { number } the ID of the token to be updated.
 * @param data { Object } JSON object to be sent as the X-Filter header.
 * @param data.label { string } update the Token's label.
 * @param data.expiry { string } Datetime string to update when the token should expire.
 *
 */


exports.createPersonalAccessToken = createPersonalAccessToken;

const updatePersonalAccessToken = (tokenId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/tokens/${tokenId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _profile.createPersonalAccessTokenSchema));
/**
 * deletePersonalAccessToken
 *
 * Deletes a single Personal Access Token.
 *
 * @param tokenId { number } the ID of the token to be deleted.
 *
 */


exports.updatePersonalAccessToken = updatePersonalAccessToken;

const deletePersonalAccessToken = tokenId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/tokens/${tokenId}`), (0, _request.setMethod)('DELETE'));

exports.deletePersonalAccessToken = deletePersonalAccessToken;