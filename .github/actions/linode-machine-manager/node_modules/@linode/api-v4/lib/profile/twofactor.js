"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.confirmTwoFactor = exports.disableTwoFactor = exports.getTFAToken = void 0;

var _twofactor = require("@linode/validation/lib/twofactor.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getTFAToken
 *
 * Generate a token for enabling two-factor authentication.
 * Used for authorizing 3rd party apps such as Authy and
 * Google Authenticator. This token can be input manually
 * into one of these 3rd party apps, or can be used to
 * generate a QR code for users to scan.
 *
 */
const getTFAToken = () => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/tfa-enable`));
/**
 * disableTwoFactor
 *
 * Disable two-factor authentication for the current user.
 * All tokens generated by authorized apps will no longer
 * be valid.
 *
 */


exports.getTFAToken = getTFAToken;

const disableTwoFactor = () => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/tfa-disable`));
/**
 * confirmTwoFactor
 *
 * Use a two-factor code generated by a third-party app
 * to confirm that Two Factor Authentication has been
 * configured correctly. If this call succeeds, TFA will
 * be enabled on future logins for your account.
 *
 * @param code { string } Code generated by Authy/Google Authenticator/etc.
 *   after the QR code has been scanned.
 *
 * @returns a scratch code: a one-use code that can be used in place of your Two Factor code,
 * in case you are unable to generate one. Keep this in a safe place to avoid
 * being locked out of your Account.
 */


exports.disableTwoFactor = disableTwoFactor;

const confirmTwoFactor = tfa_code => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/tfa-enable-confirm`), (0, _request.setData)({
  tfa_code
}, _twofactor.enableTwoFactorSchema));

exports.confirmTwoFactor = confirmTwoFactor;