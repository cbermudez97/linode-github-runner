"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteSSHKey = exports.updateSSHKey = exports.createSSHKey = exports.getSSHKey = exports.getSSHKeys = void 0;

var _profile = require("@linode/validation/lib/profile.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getSSHKeys
 *
 * Returns a collection of SSH Keys you've added to your Profile.
 *
 */
const getSSHKeys = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/profile/sshkeys`));
/**
 * getSSHKey
 *
 * View a single SSH key by ID.
 *
 */


exports.getSSHKeys = getSSHKeys;

const getSSHKey = keyId => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/sshkeys/${keyId}`));
/**
 * createSSHKey
 *
 * Add an SSH key to your account.
 *
 */


exports.getSSHKey = getSSHKey;

const createSSHKey = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/sshkeys`), (0, _request.setData)(data, _profile.createSSHKeySchema));
/**
 * updateSSHKey
 *
 * Update an existing SSH key. Currently, only the label field can be updated.
 *
 * @param keyId { number } the ID of the key to be updated.
 *
 */


exports.createSSHKey = createSSHKey;

const updateSSHKey = (keyId, data) => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/sshkeys/${keyId}`), (0, _request.setData)(data, _profile.createSSHKeySchema));
/**
 * deleteSSHKey
 *
 * Remove a single SSH key from your Profile.
 *
 * @param keyId { number } the ID of the key to be deleted.
 *
 */


exports.updateSSHKey = updateSSHKey;

const deleteSSHKey = keyId => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/sshkeys/${keyId}`));

exports.deleteSSHKey = deleteSSHKey;