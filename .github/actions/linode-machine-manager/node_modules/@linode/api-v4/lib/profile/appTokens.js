"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteAppToken = exports.getAppToken = exports.getAppTokens = void 0;

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getAppTokens
 *
 * Returns list of apps that have been authorized to access your account.
 *
 */
const getAppTokens = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/profile/apps`));
/**
 * getAppToken
 *
 * Returns information about a single app you've authorized to access your account.
 *
 * @param tokenId { number } the Id of the App Token to retrieve.
 */


exports.getAppTokens = getAppTokens;

const getAppToken = tokenId => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/profile/apps/${tokenId}`));
/**
 * deleteAppToken
 *
 * Delete a single App Token. Revokes this app's ability to
 * access the API.
 *
 * @param tokenId { number } the ID of the token to be deleted.
 */


exports.getAppToken = getAppToken;

const deleteAppToken = tokenId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/apps/${tokenId}`), (0, _request.setMethod)('DELETE'));

exports.deleteAppToken = deleteAppToken;