"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLogins = exports.updateUserPreferences = exports.getUserPreferences = exports.deleteTrustedDevice = exports.getTrustedDevices = exports.getMyGrants = exports.listGrants = exports.updateProfile = exports.getProfile = void 0;

var _profile = require("@linode/validation/lib/profile.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getProfile
 *
 * Return the current (logged in) user's profile.
 *
 */
const getProfile = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile`), (0, _request.setMethod)('GET'));
/**
 * updateProfile
 *
 * Update the current user's profile. Fields included in the
 * data param will be updated by the API; omitted fields will remain
 * unchanged.
 *
 */


exports.getProfile = getProfile;

const updateProfile = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _profile.updateProfileSchema));
/**
 * listGrants
 *
 * This returns a GrantsResponse describing what the acting User has been granted access to.
 * For unrestricted users, this will return a 204 and no body because unrestricted users have
 * access to everything without grants. This will not return information about entities you do
 * not have access to. This endpoint is useful when writing third-party OAuth applications to
 * see what options you should present to the acting User.
 *
 * This endpoint is unauthenticated.
 */


exports.updateProfile = updateProfile;

const listGrants = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/grants`));
/**
 * getMyGrants
 *
 * This returns a GrantsResponse describing what the acting User has been granted access to. For
 * unrestricted users, this will return a 204 and no body because unrestricted users have access
 * to everything without grants. This will not return information about entities you do not have
 * access to. This endpoint is useful when writing third-party OAuth applications to see what
 * options you should present to the acting User.
 *
 */


exports.listGrants = listGrants;

const getMyGrants = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/grants`), (0, _request.setMethod)('GET'));
/**
 * getTrustedDevices
 *
 * Returns a paginated list of all trusted devices associated with the user's profile.
 */


exports.getMyGrants = getMyGrants;

const getTrustedDevices = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/devices`), (0, _request.setMethod)('GET'), (0, _request.setXFilter)(filter), (0, _request.setParams)(params));
/**
 * deleteTrustedDevice
 *
 * Deletes a trusted device from a user's profile
 */


exports.getTrustedDevices = getTrustedDevices;

const deleteTrustedDevice = id => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/devices/${id}`), (0, _request.setMethod)('DELETE'));
/**
 * getUserPreferences
 *
 * Retrieves an arbitrary JSON blob for the purposes of implementing
 * conditional logic based on preferences the user chooses
 */


exports.deleteTrustedDevice = deleteTrustedDevice;

const getUserPreferences = () => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/preferences`));
};
/**
 * getUserPreferences
 *
 * Stores an arbitrary JSON blob for the purposes of implementing
 * conditional logic based on preferences the user chooses
 */


exports.getUserPreferences = getUserPreferences;

const updateUserPreferences = payload => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/preferences`), (0, _request.setData)(payload), (0, _request.setMethod)('PUT'));
};

exports.updateUserPreferences = updateUserPreferences;

const getLogins = (params, filter) => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/profile/logins`), (0, _request.setMethod)('GET'), (0, _request.setXFilter)(filter), (0, _request.setParams)(params));
};

exports.getLogins = getLogins;