"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteStackScript = exports.updateStackScript = exports.createStackScript = exports.getStackScript = exports.getStackScripts = void 0;

var _stackscripts = require("@linode/validation/lib/stackscripts.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Returns a paginated list of StackScripts.
 *
 */
const getStackScripts = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/stackscripts`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));
/**
 * Returns all of the information about a specified StackScript, including the contents of the script.
 *
 * @param stackscriptId { string } ID of the Image to look up.
 */


exports.getStackScripts = getStackScripts;

const getStackScript = stackscriptId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/stackscripts/${stackscriptId}`), (0, _request.setMethod)('GET'));
/**
 * Creates a StackScript in your Account.
 *
 * @param payload { object }
 * @param payload.script { string } The script to execute when provisioning a new Linode with this StackScript.
 * @param payload.label { string } The StackScript's label is for display purposes only.
 * @param payload.images { string[] } An array of Image IDs representing the Images that this StackScript
 * is compatible for deploying with.
 * @param payload.description { string } A description for the StackScript.
 * @param payload.is_public { boolean } This determines whether other users can use your StackScript.
 * Once a StackScript is made public, it cannot be made private.
 * @param payload.rev_note { string } This field allows you to add notes for the set of revisions
 * made to this StackScript.
 */


exports.getStackScript = getStackScript;

const createStackScript = payload => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/stackscripts`), (0, _request.setMethod)('POST'), (0, _request.setData)(payload, _stackscripts.stackScriptSchema));
/**
 * Updates a StackScript.
 *
 * @param stackscriptId { string } The ID of the StackScript to update.
 * @param payload { object }
 * @param payload.script { string } The script to execute when provisioning a new Linode with this StackScript.
 * @param payload.label { string } The StackScript's label is for display purposes only.
 * @param payload.images { string[] } An array of Image IDs representing the Images that this StackScript
 * is compatible for deploying with.
 * @param payload.description { string } A description for the StackScript.
 * @param payload.is_public { boolean } This determines whether other users can use your StackScript.
 * Once a StackScript is made public, it cannot be made private.
 * @param payload.rev_note { string } This field allows you to add notes for the set of revisions
 * made to this StackScript.
 */


exports.createStackScript = createStackScript;

const updateStackScript = (stackscriptId, payload) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/stackscripts/${stackscriptId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(payload, _stackscripts.updateStackScriptSchema));
/**
 * Deletes a private StackScript you have permission to read_write. You cannot delete a public StackScript.
 *
 * @param stackscriptId { string } The ID of the StackScript to delete.
 */


exports.updateStackScript = updateStackScript;

const deleteStackScript = stackscriptId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/stackscripts/${stackscriptId}`), (0, _request.setMethod)('DELETE'));

exports.deleteStackScript = deleteStackScript;