"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.resetPassword = exports.deleteDatabase = exports.updateDatabase = exports.createDatabase = exports.getMySQLTypes = exports.getDatabaseBackups = exports.getDatabaseConnection = exports.getDatabase = exports.getDatabases = void 0;

var _databases = require("@linode/validation/lib/databases.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getDatabases
 *
 * Return a paginated list of managed databases on this account.
 *
 */
const getDatabases = (params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * getDatabase
 *
 * Return detailed information about a single database
 *
 */


exports.getDatabases = getDatabases;

const getDatabase = databaseID => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances/${databaseID}`), (0, _request.setMethod)('GET'));
/**
 * getDatabaseConnection
 *
 * Return connection information (host and port) for a database
 *
 */


exports.getDatabase = getDatabase;

const getDatabaseConnection = databaseID => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances/${databaseID}/connection`), (0, _request.setMethod)('GET'));
/**
 * getDatabaseBackups
 *
 * Return backups information for a database
 *
 */


exports.getDatabaseConnection = getDatabaseConnection;

const getDatabaseBackups = databaseID => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances/${databaseID}/backups`), (0, _request.setMethod)('GET'));
/**
 * getMySQLTypes
 *
 * Return a paginated list of available plans/types for MySQL databases
 *
 */


exports.getDatabaseBackups = getDatabaseBackups;

const getMySQLTypes = (params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/types`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * createDatabase
 *
 * Create a new MySQL database in the specified region.
 *
 */


exports.getMySQLTypes = getMySQLTypes;

const createDatabase = data => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _databases.createDatabaseSchema));
/**
 * updateDatabase
 *
 * Update the label, tags, or maintenance schedule of an
 * existing database
 *
 */


exports.createDatabase = createDatabase;

const updateDatabase = (databaseID, data) => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances/${databaseID}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _databases.updateDatabaseSchema));
/**
 * deleteDatabase
 *
 * Delete a single database
 */


exports.updateDatabase = updateDatabase;

const deleteDatabase = databaseID => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances/${databaseID}`), (0, _request.setMethod)('DELETE'));
/**
 * resetDatabasePassword
 *
 * Resets the root password for a database
 */


exports.deleteDatabase = deleteDatabase;

const resetPassword = (databaseID, root_password) => (0, _request.default)((0, _request.setURL)(`${_constants.BETA_API_ROOT}/databases/mysql/instances/${databaseID}/password`), (0, _request.setMethod)('PUT'), (0, _request.setData)({
  root_password
}, _databases.resetPasswordSchema));

exports.resetPassword = resetPassword;