"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNotifications = exports.markEventRead = exports.markEventSeen = exports.getEvent = exports.getEvents = void 0;

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getEvents
 *
 * Retrieve a list of events on your account.
 *
 */
const getEvents = (params = {}, filter = {}) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/events`), (0, _request.setMethod)('GET'), (0, _request.setXFilter)(filter), (0, _request.setParams)(params));
/**
 * getEvent
 *
 * Retrieve details about a single event.
 *
 */


exports.getEvents = getEvents;

const getEvent = eventId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/events/${eventId}`), (0, _request.setMethod)('GET'));
/**
 * markEventSeen
 *
 * Set the "seen" property of an event to true
 *
 * @param eventId { number } ID of the event to designate as seen
 */


exports.getEvent = getEvent;

const markEventSeen = eventId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/events/${eventId}/seen`), (0, _request.setMethod)('POST'));
/**
 * markEventRead
 *
 * Set the "read" property of an event to true
 *
 * @param eventId { number } ID of the event to designate as read
 *
 */


exports.markEventSeen = markEventSeen;

const markEventRead = eventId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/events/${eventId}/read`), (0, _request.setMethod)('POST'));
/**
 * getNotifications
 *
 * Retrieve a list of active notifications on your account.
 *
 */


exports.markEventRead = markEventRead;

const getNotifications = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/notifications`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));

exports.getNotifications = getNotifications;