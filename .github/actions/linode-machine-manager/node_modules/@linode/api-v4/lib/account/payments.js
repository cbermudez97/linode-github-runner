"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deletePaymentMethod = exports.makeDefaultPaymentMethod = exports.addPaymentMethod = exports.getClientToken = exports.getPaymentMethod = exports.getPaymentMethods = exports.saveCreditCard = exports.executePaypalPayment = exports.stagePaypalPayment = exports.makePayment = exports.getPayments = void 0;

var _account = require("@linode/validation/lib/account.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getPayments
 *
 * Retrieve a paginated list of the most recent payments made
 * on your account.
 *
 */
const getPayments = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payments`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));
/**
 * makePayment
 *
 * Make a payment using the currently active credit card on your
 * account, a nonce, or by another payment method on your account
 * (by providing its id).
 *
 * @param data { object }
 * @param data.usd { string } the dollar amount of the payment
 * @param data.cvv { string } the 3-digit code on the back of the
 * @param data.nonce { string } the payment nonce to make a one time payment
 * @param data.payment_method_id { number } the payment nonce to make a one time payment
 *
 */


exports.getPayments = getPayments;

const makePayment = data => {
  /**
   * in the context of APIv4, CVV is optional - in other words, it's totally
   * valid to submit a payment without a CVV
   *
   * BUT if CVV is included in the payload, APIv4 will send an error that CVV must
   * have 3-4 characters.
   *
   * Both of these examples will pass:
   *
   * {
   *   usd: 5,
   *   cvv: ''
   * }
   *
   * {
   *   usd: 5
   * }
   */
  if (!data.cvv) {
    delete data.cvv;
  }

  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payments`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _account.PaymentSchema));
};

exports.makePayment = makePayment;

/**
 * stagePaypalPayment
 *
 * Begins the process of making a payment through Paypal.
 *
 * @param data { object }
 * @param data.cancel_url The URL to have PayPal redirect to when Payment is cancelled.
 * @param data.redirect_url The URL to have PayPal redirect to when Payment is approved.
 * @param data.usd { string } The dollar amount of the payment
 *
 * @returns a payment ID, used for submitting the payment to Paypal.
 *
 */
const stagePaypalPayment = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payments/paypal`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _account.StagePaypalPaymentSchema));
/**
 * executePaypalPayment
 *
 * Executes a payment through Paypal that has been started with the
 * stagePaypalPayment method above. Paypal will capture the designated
 * funds and credit your Linode account.
 *
 * @param data { object }
 * @param data.payment_id The ID returned by stagePaypalPayment
 * @param data.payer_id The PayerID returned by PayPal during the transaction authorization process.
 *
 */


exports.stagePaypalPayment = stagePaypalPayment;

const executePaypalPayment = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payments/paypal/execute`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _account.ExecutePaypalPaymentSchema));
/**
 * saveCreditCard
 *
 * Add or update credit card information to your account. Only one
 * card is allowed per account, so this method will overwrite any
 * existing information.
 * @deprecated Use POST /account/payment-methods
 */


exports.executePaypalPayment = executePaypalPayment;

const saveCreditCard = data => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/credit-card`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _account.CreditCardSchema));
};
/**
 * getPaymentMethods
 *
 * Gets a paginatated list of all the payment methods avalible
 * on a user's account
 *
 */


exports.saveCreditCard = saveCreditCard;

const getPaymentMethods = params => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payment-methods`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params));
};
/**
 * getPaymentMethod
 *
 * Gets information about a specific payment method on
 * your account.
 *
 * @param id {number} the id of the payment method
 *
 */


exports.getPaymentMethods = getPaymentMethods;

const getPaymentMethod = id => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payment-method/${id}`), (0, _request.setMethod)('GET'));
};
/**
 * getClientToken
 *
 * Gets a unique token that is used to interact with the
 * Braintree front-end SDK
 *
 */


exports.getPaymentMethod = getPaymentMethod;

const getClientToken = () => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/client-token`), (0, _request.setMethod)('GET'));
};
/**
 * addPaymentMethod
 *
 * Adds a new payment method to a user's account via a nonce.
 *
 * @param data { object }
 * @param data.type { string } 'credit_card' or 'payment_method_nonce'
 * @param data.is_default { boolean } whether or not this payment method should be considered the default
 * @param data.data { object } this will be data containing a nonce or credit card info
 * @param data.data.nonce { string } the nonce for the payment method to be added
 * @param data.data.card_number { string } a credit card number
 * @param data.data.expiry_year { number } credit card's expiry year
 * @param data.data.expiry_month { number } credit card's expiry month
 * @param data.data.cvv { string } credit card's cvv
 *
 */


exports.getClientToken = getClientToken;

const addPaymentMethod = data => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payment-methods`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _account.PaymentMethodSchema));
};
/**
 * makeDefaultPaymentMethod
 *
 * Action endpoint to change your default payment method
 *
 * @param id {number} id of the payment method
 */


exports.addPaymentMethod = addPaymentMethod;

const makeDefaultPaymentMethod = id => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payment-methods/${id}/make-default`), (0, _request.setMethod)('POST'));
};
/**
 * deletePaymentMethod
 *
 * Delete the specifed payment method.
 *
 * @param id {number} The id of the payment method to delete.
 */


exports.makeDefaultPaymentMethod = makeDefaultPaymentMethod;

const deletePaymentMethod = id => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/payment-methods/${id}`), (0, _request.setMethod)('DELETE'));
};

exports.deletePaymentMethod = deletePaymentMethod;