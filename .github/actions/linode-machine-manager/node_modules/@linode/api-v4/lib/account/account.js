"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelAccount = exports.updateAccountSettings = exports.getAccountSettings = exports.updateAccountInfo = exports.getNetworkUtilization = exports.getAccountInfo = void 0;

var _account = require("@linode/validation/lib/account.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getAccountInfo
 *
 * Return account information,
 * including contact and billing info.
 *
 */
const getAccountInfo = () => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account`), (0, _request.setMethod)('GET'));
};
/**
 * getNetworkUtilization
 *
 * Return your current network transfer quota and usage.
 *
 */


exports.getAccountInfo = getAccountInfo;

const getNetworkUtilization = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/transfer`), (0, _request.setMethod)('GET'));
/**
 * updateAccountInfo
 *
 * Update your contact or billing information.
 *
 */


exports.getNetworkUtilization = getNetworkUtilization;

const updateAccountInfo = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _account.updateAccountSchema));
/**
 * getAccountSettings
 *
 * Retrieve general account-level settings.
 *
 */


exports.updateAccountInfo = updateAccountInfo;

const getAccountSettings = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/settings`), (0, _request.setMethod)('GET'));
/**
 * updateAccountSettings
 *
 * Update a user's account settings.
 *
 */


exports.getAccountSettings = getAccountSettings;

const updateAccountSettings = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/settings`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _account.UpdateAccountSettingsSchema));
/**
 * cancelAccount
 *
 * Cancels an account and returns a survey monkey link for a user to fill out
 */


exports.updateAccountSettings = updateAccountSettings;

const cancelAccount = data => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/cancel`), (0, _request.setMethod)('POST'), (0, _request.setData)(data));
};

exports.cancelAccount = cancelAccount;