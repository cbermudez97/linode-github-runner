"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateGrants = exports.getGrants = exports.deleteUser = exports.updateUser = exports.createUser = exports.getUser = exports.getUsers = void 0;

var _account = require("@linode/validation/lib/account.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getUsers
 *
 * Returns a paginated list of users on this account.
 *
 */
const getUsers = (params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/users`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * getUser
 *
 * Returns details about a single user.
 *
 * @param username { string } name of the user to be viewed.
 *
 */


exports.getUsers = getUsers;

const getUser = username => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/users/${username}`), (0, _request.setMethod)('GET'));
/**
 * createUser
 *
 * Add a new user to your account.
 *
 * @param data { object }
 *
 */


exports.getUser = getUser;

const createUser = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/users`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _account.CreateUserSchema));
/**
 * updateUser
 *
 * Update a user's information.
 *
 * @param username { string } username of the user to be updated.
 * @param data { object } The fields of the user object to be updated.
 *
 */


exports.createUser = createUser;

const updateUser = (username, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/users/${username}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _account.UpdateUserSchema));
/**
 * deleteUser
 *
 * Remove a single user from your account.
 *
 * @param username { string } username of the user to be deleted.
 *
 */


exports.updateUser = updateUser;

const deleteUser = username => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/users/${username}`), (0, _request.setMethod)('DELETE'));
/**
 * getGrants
 *
 * Returns the full grants structure for this User. This includes all entities on
 * the Account alongside what level of access this User has to each of them. Individual
 * users may view their own grants at the /profile/grants endpoint,
 * but will not see entities that they have no access to.
 *
 * @param username { number } the username to look up.
 *
 */


exports.deleteUser = deleteUser;

const getGrants = username => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/users/${username}/grants`), (0, _request.setMethod)('GET'));
/**
 * updateGrants
 *
 * Update the grants a User has. This can be used to give a User access
 * to new entities or actions, or take access away. You do not need to include
 * the grant for every entity on the Account in this request;
 * any that are not included will remain unchanged.
 *
 * @param username { number } ID of the client to be viewed.
 * @param data { object } the Grants object to update.
 *
 */


exports.getGrants = getGrants;

const updateGrants = (username, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/users/${username}/grants`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data));

exports.updateGrants = updateGrants;