"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteOAuthClient = exports.updateOAuthClient = exports.resetOAuthClientSecret = exports.createOAuthClient = exports.getOAuthClient = exports.getOAuthClients = void 0;

var _account = require("@linode/validation/lib/account.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getOAuthClients
 *
 * Returns a paginated list of OAuth apps authorized on your account.
 *
 */
const getOAuthClients = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/oauth-clients`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));
/**
 * getOAuthClient
 *
 * Returns a single authorized OAuth app
 *
 * @param clientId { number } the ID of the OAuth client to retrieve
 *
 */


exports.getOAuthClients = getOAuthClients;

const getOAuthClient = clientId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/oauth-clients/${clientId}`), (0, _request.setMethod)('GET'));
/**
 * createOAuthClient
 *
 * Create a new authorized OAuth client. The creation endpoint
 * will return a secret used for authenticating with the new app.
 * This secret will not be returned on subsequent requests
 * (e.g. using getOAuthClient)
 *
 */


exports.getOAuthClient = getOAuthClient;

const createOAuthClient = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/oauth-clients`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _account.createOAuthClientSchema));
/**
 * resetOAuthClientSecret
 *
 * Resets the OAuth Client secret for a client you own, and returns the OAuth Client
 * with the new secret in plaintext. This secret is not supposed to be publicly known
 * or disclosed anywhere. This can be used to generate a new secret in case the one
 * you have has been leaked, or to get a new secret if you lost the original.
 * The old secret is expired immediately, and logins to your client with the old secret will fail.
 *
 */


exports.createOAuthClient = createOAuthClient;

const resetOAuthClientSecret = clientId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/oauth-clients/${clientId}/reset-secret`), (0, _request.setMethod)('POST'));
/**
 * updateOAuthClient
 *
 * Update the label and/or redirect uri of your OAuth client.
 *
 * @param clientId { number } the ID of the client to be updated
 */


exports.resetOAuthClientSecret = resetOAuthClientSecret;

const updateOAuthClient = (clientId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/oauth-clients/${clientId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _account.updateOAuthClientSchema));
/**
 * deleteOAuthClient
 *
 * Deletes an OAuth Client registered with Linode.
 * The Client ID and Client secret will no longer be accepted by
 * https://login.linode.com, and all tokens issued to this client
 * will be invalidated (meaning that if your application was using
 * a token, it will no longer work).
 *
 * @param clientId { number } ID of the client to be deleted
 *
 */


exports.updateOAuthClient = updateOAuthClient;

const deleteOAuthClient = clientId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/account/oauth-clients/${clientId}`), (0, _request.setMethod)('DELETE'));

exports.deleteOAuthClient = deleteOAuthClient;