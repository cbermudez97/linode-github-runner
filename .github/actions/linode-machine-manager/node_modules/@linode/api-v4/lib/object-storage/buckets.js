"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateBucketAccess = exports.getBucketAccess = exports.deleteSSLCert = exports.getSSLCert = exports.uploadSSLCert = exports.getObjectList = exports.deleteBucket = exports.createBucket = exports.getBucketsInCluster = exports.getBuckets = exports.getBucket = void 0;

var _buckets = require("@linode/validation/lib/buckets.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getBucket
 *
 * Get one Object Storage Bucket.
 */
const getBucket = (clusterId, bucketName) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}/${bucketName}`));
/**
 * getBuckets
 *
 * Gets a list of a user's Object Storage Buckets.
 */


exports.getBucket = getBucket;

const getBuckets = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets`));
/**
 * getBucketsInCluster
 *
 * Gets a list of a user's Object Storage Buckets in the specified cluster.
 */


exports.getBuckets = getBuckets;

const getBucketsInCluster = (clusterId, params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}`));
/**
 * createBucket
 *
 * Creates a new Bucket on your account.
 *
 * @param data { object } The label and clusterId of the new Bucket.
 *
 */


exports.getBucketsInCluster = getBucketsInCluster;

const createBucket = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _buckets.CreateBucketSchema));
/**
 * deleteBucket
 *
 * Removes a Bucket from your account.
 *
 * NOTE: Attempting to delete a non-empty bucket will result in an error.
 */


exports.createBucket = createBucket;

const deleteBucket = ({
  cluster,
  label
}) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${cluster}/${label}`), (0, _request.setMethod)('DELETE'));
/**
 * Returns a list of Objects in a given Bucket.
 */


exports.deleteBucket = deleteBucket;

const getObjectList = (clusterId, bucketName, params) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}/${bucketName}/object-list`));
/**
 * uploadSSLCert
 */


exports.getObjectList = getObjectList;

const uploadSSLCert = (clusterId, bucketName, data) => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setData)(data, _buckets.UploadCertificateSchema), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}/${bucketName}/ssl`));
/**
 * getSSLCert
 *
 * Returns { ssl: true } if there is an SSL certificate available for
 * the specified bucket, { ssl: false } otherwise.
 */


exports.uploadSSLCert = uploadSSLCert;

const getSSLCert = (clusterId, bucketName) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}/${bucketName}/ssl`));
/**
 * deleteSSLCert
 *
 * Removes any SSL cert associated with the specified bucket. Certs are
 * removed automatically when a bucket is deleted; this endpoint is only
 * for removing certs without altering the bucket.
 */


exports.getSSLCert = getSSLCert;

const deleteSSLCert = (clusterId, bucketName) => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}/${bucketName}/ssl`));
/**
 * getBucketAccess
 *
 * Returns access information (ACL, CORS) for a given Bucket.
 */


exports.deleteSSLCert = deleteSSLCert;

const getBucketAccess = (clusterId, bucketName) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}/${bucketName}/access`));
/**
 * updateBucketAccess
 *
 * Updates access information (ACL, CORS) for a given Bucket.
 */


exports.getBucketAccess = getBucketAccess;

const updateBucketAccess = (clusterId, bucketName, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setURL)(`${_constants.API_ROOT}/object-storage/buckets/${clusterId}/${bucketName}/access`), (0, _request.setData)(data, _buckets.UpdateBucketAccessSchema));

exports.updateBucketAccess = updateBucketAccess;