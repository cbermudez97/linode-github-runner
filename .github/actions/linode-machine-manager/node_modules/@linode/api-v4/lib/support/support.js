"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadAttachment = exports.createReply = exports.closeSupportTicket = exports.createSupportTicket = exports.getTicketReplies = exports.getTicket = exports.getTickets = void 0;

var _support = require("@linode/validation/lib/support.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getTickets
 *
 * Base function for retrieving a page of support ticket objects.
 *
 * @param params { Object } any parameters to be sent with the request
 * @param filter { Object } JSON object to be sent as the X-Filter header
 *
 *
 */
const getTickets = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/support/tickets`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));
/**
 * getTicket
 *
 * Retrieve a single support ticket.
 *
 * @param ticketID { Number } the ID of the ticket to be retrieved
 * @param params { Object } any parameters to be sent with the request
 * @param filter { Object } JSON object to be sent as the X-Filter header
 *
 */


exports.getTickets = getTickets;

const getTicket = ticketID => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/support/tickets/${ticketID}`), (0, _request.setMethod)('GET'));
/**
 * getTicketReplies
 *
 * Get all replies to a single ticket. Returns an
 * array of Reply objects.
 *
 * @param ticketID { Number } the ID of the ticket
 * @param params { Object } any parameters to be sent with the request
 * @param filter { Object } JSON object to be sent as the X-Filter header
 *
 *
 */


exports.getTicket = getTicket;

const getTicketReplies = (ticketId, params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/support/tickets/${ticketId}/replies`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));
/**
 * createSupportTicket
 *
 * Add a new support ticket.
 *
 * @param data { Object } the JSON body for the POST request
 * @param data.summary { string } a summary (or title) for the support ticket
 * @param data.description { string } body text of the support ticket
 *
 */


exports.getTicketReplies = getTicketReplies;

const createSupportTicket = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/support/tickets`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _support.createSupportTicketSchema));
/**
 * closeSupportTicket
 *
 * Close a single support ticket. This will only succeed if the ticket
 * is marked as "closable," which is a field on the ticket object. Tickets
 * opened by Linode are generally not closable through the API.
 *
 * @param ticketID { Number } the ID of the ticket to be closed
 *
 */


exports.createSupportTicket = createSupportTicket;

const closeSupportTicket = ticketId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/support/tickets/${ticketId}/close`), (0, _request.setMethod)('POST'));
/**
 * createReply
 *
 * Reply to a support ticket.
 *
 * @param data { Object } the ID of the ticket to be retrieved
 * @param data.ticket_id { number } the ID of the ticket
 * @param data.description { string } the text of the reply
 * @param validate { boolean } whether to run the validation schema against the request
 *
 */


exports.closeSupportTicket = closeSupportTicket;

const createReply = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/support/tickets/${data.ticket_id}/replies`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _support.createReplySchema));
/**
 * uploadAttachment
 *
 * Attach an image or other file to a support ticket.
 *
 * @param ticketID { Number } the ID of the ticket to be retrieved
 * @param formData { Object } any parameters to be sent with the request
 *
 */


exports.createReply = createReply;

const uploadAttachment = (ticketId, formData) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/support/tickets/${ticketId}/attachments`), (0, _request.setMethod)('POST'), (0, _request.setData)(formData));

exports.uploadAttachment = uploadAttachment;