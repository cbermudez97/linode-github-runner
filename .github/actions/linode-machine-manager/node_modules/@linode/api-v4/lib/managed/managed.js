"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getManagedStats = exports.getManagedIssues = exports.deleteContact = exports.updateContact = exports.createContact = exports.getManagedContacts = exports.updateLinodeSettings = exports.getSSHPubKey = exports.createCredential = exports.deleteCredential = exports.updatePassword = exports.updateCredential = exports.getCredentials = exports.updateServiceMonitor = exports.createServiceMonitor = exports.getLinodeSettings = exports.deleteServiceMonitor = exports.enableServiceMonitor = exports.disableServiceMonitor = exports.getServices = exports.enableManaged = void 0;

var _managed = require("@linode/validation/lib/managed.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * enableManaged
 *
 * Enables the Managed feature
 * on your account. This service is billed at $100/month/Linode.
 *
 * Should this live in /account?
 *
 */
const enableManaged = () => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/account/settings/managed-enable`));
/**
 * getServices
 *
 * Returns a paginated list of Managed Services on your account.
 */


exports.enableManaged = enableManaged;

const getServices = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/managed/services`));
/**
 * disableServiceMonitor
 *
 * Temporarily disables monitoring of a Managed Service.
 */


exports.getServices = getServices;

const disableServiceMonitor = serviceID => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/services/${serviceID}/disable`));
/**
 * enableServiceMonitor
 *
 * Enables monitoring of a Managed Service that is currently disabled.
 */


exports.disableServiceMonitor = disableServiceMonitor;

const enableServiceMonitor = serviceID => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/services/${serviceID}/enable`));
/**
 * deleteServiceMonitor
 *
 * Disables a Managed Service and removes it from your account.
 */


exports.enableServiceMonitor = enableServiceMonitor;

const deleteServiceMonitor = serviceID => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/services/${serviceID}`));
/**
 * getLinodeSettings
 *
 * Returns a paginated list of Managed Settings for your Linodes. There will be one entry per Linode on your Account.
 */


exports.deleteServiceMonitor = deleteServiceMonitor;

const getLinodeSettings = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/managed/linode-settings`));
/**
 * createServiceMonitor
 *
 * Creates a Managed Service Monitor
 */


exports.getLinodeSettings = getLinodeSettings;

const createServiceMonitor = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/services`), (0, _request.setData)(data, _managed.createServiceMonitorSchema));
/**
 * updateServiceMonitor
 *
 * Update a Managed Service Monitor
 */


exports.createServiceMonitor = createServiceMonitor;

const updateServiceMonitor = (monitorID, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/services/${monitorID}`), (0, _request.setData)(data, _managed.createServiceMonitorSchema));
/**
 * getCredentials
 *
 * Returns a paginated list of Managed Credentials for your account.
 */


exports.updateServiceMonitor = updateServiceMonitor;

const getCredentials = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/managed/credentials`));
/**
 * updateCredential
 *
 * Update the label on a Managed Credential on your account.
 * Other fields (password and username) cannot be changed.
 */


exports.getCredentials = getCredentials;

const updateCredential = (credentialID, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setData)(data, _managed.updateCredentialSchema), (0, _request.setURL)(`${_constants.API_ROOT}/managed/credentials/${credentialID}`));
/**
 * updatePassword
 *
 * Update the username and/or password on a Managed Credential on your account.
 */


exports.updateCredential = updateCredential;

const updatePassword = (credentialID, data) => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setData)(data, _managed.updatePasswordSchema), (0, _request.setURL)(`${_constants.API_ROOT}/managed/credentials/${credentialID}/update`));
/**
 * deleteCredential
 *
 * Disables a Managed Credential and removes it from your account.
 */


exports.updatePassword = updatePassword;

const deleteCredential = credentialID => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/credentials/${credentialID}/revoke`));
/*
 * createCredential
 *
 * Creates a Managed Credential
 */


exports.deleteCredential = deleteCredential;

const createCredential = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/credentials`), (0, _request.setData)(data, _managed.createCredentialSchema));
/**
 * getSSHKey
 *
 * Returns the unique SSH public key assigned to your Linode account's Managed service.
 * If you add this public key to a Linode on your account, Linode special forces will be
 * able to log in to the Linode with this key when attempting to resolve issues.
 */


exports.createCredential = createCredential;

const getSSHPubKey = () => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/credentials/sshkey`));
/**
 * updateLinodeSettings
 *
 * Updates a single Linode's Managed settings.
 *
 */


exports.getSSHPubKey = getSSHPubKey;

const updateLinodeSettings = (linodeId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/managed/linode-settings/${linodeId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _managed.updateManagedLinodeSchema));
/**
 * getManagedContacts
 *
 * Returns a paginated list of Managed Contacts on your Account.
 */


exports.updateLinodeSettings = updateLinodeSettings;

const getManagedContacts = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/managed/contacts`));
/**
 * createContact
 *
 * Creates a Managed Contact
 */


exports.getManagedContacts = getManagedContacts;

const createContact = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/contacts`), (0, _request.setData)(data, _managed.createContactSchema));
/**
 * updateContact
 *
 * Updates a Managed Contact
 */


exports.createContact = createContact;

const updateContact = (contactId, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/contacts/${contactId}`), (0, _request.setData)(data, _managed.createContactSchema));
/**
 * deleteContact
 *
 * Deletes a Managed Contact
 */


exports.updateContact = updateContact;

const deleteContact = contactId => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/contacts/${contactId}`));
/**
 * getManagedIssues
 *
 * Returns a paginated list of Issues on a Managed customer's account.
 */


exports.deleteContact = deleteContact;

const getManagedIssues = () => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/issues`));
/**
 * getManagedStats
 *
 * Returns usage data for all of the Linodes on a Managed customer's account.
 */


exports.getManagedIssues = getManagedIssues;

const getManagedStats = () => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/managed/stats`));

exports.getManagedStats = getManagedStats;