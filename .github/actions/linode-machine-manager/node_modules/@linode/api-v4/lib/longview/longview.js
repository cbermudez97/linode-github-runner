"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateActiveLongviewPlan = exports.getActiveLongviewPlan = exports.getLongviewSubscriptions = exports.updateLongviewClient = exports.deleteLongviewClient = exports.getLongviewClients = exports.createLongviewClient = void 0;

var _longview = require("@linode/validation/lib/longview.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

const createLongviewClient = label => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/longview/clients`), (0, _request.setData)({
    label
  }, _longview.longviewClientCreate), (0, _request.setMethod)('POST'));
};

exports.createLongviewClient = createLongviewClient;

const getLongviewClients = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/longview/clients`), (0, _request.setParams)(params), (0, _request.setXFilter)(filter), (0, _request.setMethod)('GET'));

exports.getLongviewClients = getLongviewClients;

const deleteLongviewClient = id => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/longview/clients/${id}`), (0, _request.setMethod)('DELETE'));

exports.deleteLongviewClient = deleteLongviewClient;

const updateLongviewClient = (id, label) => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/longview/clients/${id}`), (0, _request.setData)({
    label
  }, _longview.longviewClientCreate), (0, _request.setMethod)('PUT'));
};

exports.updateLongviewClient = updateLongviewClient;

const getLongviewSubscriptions = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/longview/subscriptions`), (0, _request.setMethod)('GET'));

exports.getLongviewSubscriptions = getLongviewSubscriptions;

const getActiveLongviewPlan = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/longview/plan`), (0, _request.setMethod)('GET'));
/**
 * updateActiveLongviewPlan
 *
 * Change this account's Longview subscription. To move from a
 * paid Longview Pro plan back to the free plan, submit an empty
 * object.
 */


exports.getActiveLongviewPlan = getActiveLongviewPlan;

const updateActiveLongviewPlan = plan => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/longview/plan`), (0, _request.setData)(plan), (0, _request.setMethod)('PUT'));

exports.updateActiveLongviewPlan = updateActiveLongviewPlan;