"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getDeprecatedLinodeTypes = exports.getType = exports.getLinodeTypes = exports.getLinodeKernel = exports.getLinodeKernels = exports.getLinodeTransferByDate = exports.getLinodeTransfer = exports.getLinodeStatsByDate = exports.getLinodeStats = void 0;

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getLinodeStats
 *
 * Returns CPU, IO, IPv4, and IPv6 statistics for your Linode for the past 24 hours.
 *
 * @param linodeId { number } The id of the Linode to retrieve stats data for.
 */
const getLinodeStats = linodeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/stats`), (0, _request.setMethod)('GET'));
/**
 * getLinodeStats
 *
 * Returns CPU, IO, IPv4, and IPv6 statistics for a specific month.
 * The year/month values must be either a date in the past, or the current month.
 * If the current month, statistics will be retrieved for the past 30 days.
 *
 * @param linodeId { number } The id of the Linode to retrieve stats data for.
 * @param year { string }
 * @param month { string }
 */


exports.getLinodeStats = getLinodeStats;

const getLinodeStatsByDate = (linodeId, year, month) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/stats/${year}/${month}`), (0, _request.setMethod)('GET'));
/**
 * getLinodeTransfer
 *
 * Returns current network transfer information for your Linode.
 *
 * @param linodeId { number } The id of the Linode to retrieve network transfer information for.
 */


exports.getLinodeStatsByDate = getLinodeStatsByDate;

const getLinodeTransfer = linodeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/transfer`), (0, _request.setMethod)('GET'));
/**
 * getLinodeTransferByDate
 *
 * Returns network transfer information for your Linode by date
 *
 * @param linodeId { number } The id of the Linode to retrieve network transfer information for.
 * @param year { string }
 * @param month { string }
 */


exports.getLinodeTransfer = getLinodeTransfer;

const getLinodeTransferByDate = (linodeId, year, month) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/transfer/${year}/${month}`), (0, _request.setMethod)('GET'));
/**
 * getLinodeKernels
 *
 * Returns a paginated list of available kernels.
 * This endpoint does not require authentication.
 *
 */


exports.getLinodeTransferByDate = getLinodeTransferByDate;

const getLinodeKernels = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/kernels`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));
/**
 * getLinodeKernel
 *
 * Returns detailed information about a single Kernel.
 * This endpoint does not require authentication.
 *
 * @param kernelId { number } The id of the kernel to retrieve.
 */


exports.getLinodeKernels = getLinodeKernels;

const getLinodeKernel = kernelId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/kernels/${kernelId}`), (0, _request.setMethod)('GET'));
/**
 * getLinodeTypes
 *
 * Return a paginated list of available Linode types.
 * This endpoint does not require authentication.
 */


exports.getLinodeKernel = getLinodeKernel;

const getLinodeTypes = params => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/types`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params));
/**
 * getType
 *
 * View details for a single Linode type.
 * This endpoint does not require authentication.
 *
 * @param typeId { number } The id of the Linode type to retrieve.
 */


exports.getLinodeTypes = getLinodeTypes;

const getType = typeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/types/${typeId}`), (0, _request.setMethod)('GET'));
/**
 * getDeprecatedLinodeTypes
 *
 * Returns a list of deprecated Types that are no longer
 * supported. This endpoint does not require authentication.
 *
 */


exports.getType = getType;

const getDeprecatedLinodeTypes = () => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/types-legacy`), (0, _request.setMethod)('GET'));

exports.getDeprecatedLinodeTypes = getDeprecatedLinodeTypes;