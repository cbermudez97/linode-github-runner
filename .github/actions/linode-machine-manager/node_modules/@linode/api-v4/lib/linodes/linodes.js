"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeLinodePassword = exports.deleteLinode = exports.updateLinode = exports.createLinode = exports.getLinodes = exports.getLinodeVolumes = exports.getLinodeLishToken = exports.getLinode = void 0;

var _linodes = require("@linode/validation/lib/linodes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getLinode
 *
 * View details for a single Linode.
 *
 * @param linodeId { number } The id of the Linode to retrieve.
 */
const getLinode = linodeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}`), (0, _request.setMethod)('GET'));
/**
 * getLinodeLishToken
 *
 * Generates a token which can be used to authenticate with LISH.
 *
 * @param linodeId { number } The id of the Linode.
 */


exports.getLinode = getLinode;

const getLinodeLishToken = linodeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/lish_token`), (0, _request.setMethod)('POST'));
/**
 * getLinodeVolumes
 *
 * Returns a paginated list of Block Storage volumes attached to the
 * specified Linode.
 *
 * @param linodeId { number } The id of the Linode.
 */


exports.getLinodeLishToken = getLinodeLishToken;

const getLinodeVolumes = (linodeId, params = {}, filter = {}) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/volumes`), (0, _request.setMethod)('GET'), (0, _request.setXFilter)(filter), (0, _request.setParams)(params));
/**
 * getLinodes
 *
 * Returns a paginated list of Linodes on your account.
 *
 * @param linodeId { number } The id of the Linode.
 */


exports.getLinodeVolumes = getLinodeVolumes;

const getLinodes = (params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/`), (0, _request.setMethod)('GET'), (0, _request.setXFilter)(filter), (0, _request.setParams)(params));
/**
 * createLinode
 *
 * Create a new Linode. The authenticating user must have the
 * add_linodes grant in order to use this endpoint.
 *
 * @param data { object } Options for type, region, etc.
 *
 * @returns the newly created Linode object.
 */


exports.getLinodes = getLinodes;

const createLinode = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _linodes.CreateLinodeSchema));
/**
 * updateLinode
 *
 * Generates a token which can be used to authenticate with LISH.
 *
 * @param linodeId { number } The id of the Linode to be updated.
 * @param values { object } the fields of the Linode object to be updated.
 * Fields not included in this parameter will be left unchanged.
 */


exports.createLinode = createLinode;

const updateLinode = (linodeId, values) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(values, _linodes.UpdateLinodeSchema));
/**
 * deleteLinode
 *
 * Delete the specified Linode instance.
 *
 * @param linodeId { number } The id of the Linode to be deleted.
 */


exports.updateLinode = updateLinode;

const deleteLinode = linodeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}`), (0, _request.setMethod)('DELETE'));
/**
 * resetLinodePassword
 *
 * This method is distinct from changeLinodeDiskPassword,
 * in that it resets the root password on the Linode itself
 * rather than on a specific disk. This situation only applies
 * to bare metal instances, which don't have disks that are managed
 * through the API.
 */


exports.deleteLinode = deleteLinode;

const changeLinodePassword = (linodeId, root_pass) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/password`), (0, _request.setData)({
  root_pass
}), (0, _request.setMethod)('POST'));

exports.changeLinodePassword = changeLinodePassword;