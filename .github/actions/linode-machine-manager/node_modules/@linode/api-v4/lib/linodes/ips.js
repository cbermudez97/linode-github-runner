"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.removeIPAddress = exports.allocateIPAddress = exports.getLinodeIPs = void 0;

var _linodes = require("@linode/validation/lib/linodes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getLinodeIPs
 *
 * Return a list of IP addresses allocated to this Linode.
 *
 * @param linodeId { number } The id of the Linode whose addresses you would like to retrieve.
 */
const getLinodeIPs = id => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${id}/ips`), (0, _request.setMethod)('GET'));
/**
 * allocateIPAddress
 *
 * Allocates a public or private IPv4 address to a Linode
 *
 * @param linodeId { number } The id of the Linode to receive a new IP address.
 * @param data { object }
 * @param data.type { string } Must be "ipv4", as currently only IPv4 addresses can be allocated.
 * @param data.public { boolean } True for a public IP address, false for a private address.
 */


exports.getLinodeIPs = getLinodeIPs;

const allocateIPAddress = (linodeID, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeID}/ips`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _linodes.IPAllocationSchema));
/**
 * removeIPAddress
 *
 * Deletes a Linode's public IP Address. This request will fail if this is the last IP
 * address allocated to the Linode. This request cannot be invoked on a private IP Address
 *
 * @param {linodeID: number, IPAddress: string} payload - the linode ID and IP Address for
 * which you'd like the delete request to be invoked
 */


exports.allocateIPAddress = allocateIPAddress;

const removeIPAddress = payload => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${payload.linodeID}/ips/${payload.IPAddress}`), (0, _request.setMethod)('DELETE'));
};

exports.removeIPAddress = removeIPAddress;