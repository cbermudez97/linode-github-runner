"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.updateLinodeConfig = exports.deleteLinodeConfig = exports.createLinodeConfig = exports.getLinodeConfig = exports.getLinodeConfigs = void 0;

var _linodes = require("@linode/validation/lib/linodes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getLinodeConfigs
 *
 * Lists Configuration profiles associated with the specified Linode.
 *
 * @param linodeId { number } The id of the Linode to list configs for.
 * @todo VolumeAttachmentDrawer, ConfigSelect, and LinodeConfigs all make use of this still, and probably shouldnt.
 */
const getLinodeConfigs = (linodeId, params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/configs`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * getLinodeConfig
 *
 * Returns information about a single Linode configuration.
 *
 * @param linodeId { number } The id of a Linode the specified config is attached to.
 * @param configId { number } The id of the config to be returned
 */


exports.getLinodeConfigs = getLinodeConfigs;

const getLinodeConfig = (linodeId, configId) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/configs/${configId}`), (0, _request.setMethod)('GET'));
/**
 * createLinodeConfig
 *
 * Adds a new Configuration profile to a Linode.
 *
 * @param linodeId { number } The id of a Linode to receive the new config.
 */


exports.getLinodeConfig = getLinodeConfig;

const createLinodeConfig = (linodeId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/configs`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _linodes.CreateLinodeConfigSchema));
/**
 * deleteLinodeConfig
 *
 * Delete a single configuration profile from a Linode.
 *
 * @param linodeId { number } The id of a Linode the specified config is attached to.
 * @param configId { number } The id of the config to be deleted
 */


exports.createLinodeConfig = createLinodeConfig;

const deleteLinodeConfig = (linodeId, configId) => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/configs/${configId}`));
/**
 * updateLinodeConfig
 *
 * Update a configuration profile.
 *
 * @param linodeId { number } The id of a Linode the specified config is attached to.
 * @param configId { number } The id of the config to be updated.
 */


exports.deleteLinodeConfig = deleteLinodeConfig;

const updateLinodeConfig = (linodeId, configId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/configs/${configId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _linodes.UpdateLinodeConfigSchema));

exports.updateLinodeConfig = updateLinodeConfig;