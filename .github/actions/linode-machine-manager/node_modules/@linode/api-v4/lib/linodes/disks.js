"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changeLinodeDiskPassword = exports.deleteLinodeDisk = exports.cloneLinodeDisk = exports.resizeLinodeDisk = exports.updateLinodeDisk = exports.getLinodeDisk = exports.createLinodeDisk = exports.getLinodeDisks = void 0;

var _linodes = require("@linode/validation/lib/linodes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getLinodeDisks
 *
 * Returns a paginated list of disks associated with the specified Linode.
 *
 * @param linodeId { number } The id of the Linode to list disks for.
 */
const getLinodeDisks = (linodeId, params, filter) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filter));
/**
 * createLinodeDisk
 *
 * Lists Configuration profiles associated with the specified Linode.
 *
 * @param linodeId { number } The id of the Linode to list configs for.
 */


exports.getLinodeDisks = getLinodeDisks;

const createLinodeDisk = (linodeId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _linodes.CreateLinodeDiskSchema));
/**
 * getLinodeDisk
 *
 * Retrieve detailed information about a single Disk.
 *
 * @param linodeId { number } The id of the Linode containing the disk to be viewed.
 * @param diskId { number } The id of the disk to be viewed.
 */


exports.createLinodeDisk = createLinodeDisk;

const getLinodeDisk = (linodeId, diskId) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks/${diskId}`), (0, _request.setMethod)('GET'));
/**
 * updateLinodeDisk
 *
 * Update settings for a disk. Fields not specified will be left unchanged.
 *
 * @param linodeId { number } The id of the Linode containing the disk to be updated.
 * @param diskId { number } The id of the disk to be updated.
 */


exports.getLinodeDisk = getLinodeDisk;

const updateLinodeDisk = (linodeId, diskId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks/${diskId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data));
/**
 * resizeLinodeDisk
 *
 * Resizes a Disk you have permission to read_write.
 * The Linode this Disk is attached to must be shut down for resizing to take effect.
 * If you are resizing the Disk to a smaller size, it cannot be made smaller than
 * what is required by the total size of the files current on the Disk.
 * The Disk must not be in use. If the Disk is in use, the request will
 * succeed but the resize will ultimately fail.
 *
 * @param linodeId { number } The id of the Linode containing the disk to be resized.
 * @param diskId { number } The id of the disk to be resized.
 * @param size { number } The intended size of the disk (in MB).
 */


exports.updateLinodeDisk = updateLinodeDisk;

const resizeLinodeDisk = (linodeId, diskId, size) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks/${diskId}/resize`), (0, _request.setMethod)('POST'), (0, _request.setData)({
  size
}, _linodes.ResizeLinodeDiskSchema));
/**
 * cloneLinodeDisk
 *
 * Clones (duplicates) a Disk on an individual Linode.
 * @param linodeId { number } The id of the Linode containing the disk to be resized.
 * @param diskId { number } The id of the disk to be resized.
 */


exports.resizeLinodeDisk = resizeLinodeDisk;

const cloneLinodeDisk = (linodeId, diskId) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks/${diskId}/clone`), (0, _request.setMethod)('POST'));
/**
 * deleteLinodeDisk
 *
 * Deletes a Disk you have permission to read_write.
 *
 * @param linodeId { number } The id of the Linode containing the disk to be deleted.
 * @param diskId { number } The id of the disk to be deleted.
 */


exports.cloneLinodeDisk = cloneLinodeDisk;

const deleteLinodeDisk = (linodeId, diskId) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks/${diskId}`), (0, _request.setMethod)('DELETE'));
/**
 * changeLinodeDiskPassword
 *
 * Resets the password of a Disk you have permission to read_write.
 *
 * @param linodeId { number } The id of the Linode containing the target disk.
 * @param diskId { number } The id of the target disk.
 * @param password { string } The new disk password.
 */


exports.deleteLinodeDisk = deleteLinodeDisk;

const changeLinodeDiskPassword = (linodeId, diskId, password) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/disks/${diskId}/password`), (0, _request.setMethod)('POST'), (0, _request.setData)({
  password
}, _linodes.UpdateLinodePasswordSchema));

exports.changeLinodeDiskPassword = changeLinodeDiskPassword;