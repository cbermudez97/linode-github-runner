"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restoreBackup = exports.takeSnapshot = exports.cancelBackups = exports.enableBackups = exports.getLinodeBackups = void 0;

var _linodes = require("@linode/validation/lib/linodes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getLinodeBackups
 *
 * Returns information about this Linode's available backups.
 *
 * @param linodeId { number } The id of a Linode with backups enabled.
 */
const getLinodeBackups = id => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${id}/backups`), (0, _request.setMethod)('GET'));
/**
 * enableBackups
 *
 * Enable backups service for a single Linode.
 *
 * @param linodeId { number } The id of the Linode to enable backup services for.
 */


exports.getLinodeBackups = getLinodeBackups;

const enableBackups = linodeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/backups/enable`), (0, _request.setMethod)('POST'));
/**
 * cancelBackups
 *
 * Cancel backups service for the specified Linode.
 *
 * @param linodeId { number } The id of a Linode with backups enabled.
 */


exports.enableBackups = enableBackups;

const cancelBackups = linodeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/backups/cancel`), (0, _request.setMethod)('POST'));
/**
 * takeSnapshot
 *
 * Creates a snapshot Backup of a Linode. If you already have a snapshot
 * of this Linode, this is a destructive action. The previous snapshot will be deleted.
 *
 * @param linodeId { number } The id of the Linode to retrieve.
 * @param label { string } A label to identify the new snapshot.
 */


exports.cancelBackups = cancelBackups;

const takeSnapshot = (linodeId, label) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/backups`), (0, _request.setMethod)('POST'), (0, _request.setData)({
  label
}, _linodes.CreateSnapshotSchema));
/**
 * restoreBackup
 *
 * Restores a Linode's Backup to the specified Linode.
 *
 * @param linodeId { number } The id of the Linode that the backup belongs to.
 * @param backupId { number } The id of the backup to restore from.
 * @param targetLinodeId { number } The id of the Linode to restore the backup to.
 * @param overwrite: { boolean } If True, deletes all Disks and Configs on the
 * target Linode before restoring.
 */


exports.takeSnapshot = takeSnapshot;

const restoreBackup = (linodeId, backupId, targetLinodeId, overwrite) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/linode/instances/${linodeId}/backups/${backupId}/restore`), (0, _request.setMethod)('POST'), (0, _request.setData)({
  linode_id: targetLinodeId,
  overwrite
}));

exports.restoreBackup = restoreBackup;