"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cancelTransfer = exports.acceptEntityTransfer = exports.createEntityTransfer = exports.getEntityTransfer = exports.getEntityTransfers = void 0;

var _transfers = require("@linode/validation/lib/transfers.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// SELF SERVE ENTITY TRANSFERS

/**
 * getEntityTransfers
 *
 * Returns a paginated list of all Entity Transfers which this customer has created or accepted.
 */
const getEntityTransfers = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/account/entity-transfers`));
/**
 * getEntityTransfer
 *
 * Get a single Entity Transfer by its token (uuid). A Pending transfer
 * can be retrieved by any unrestricted user.
 *
 */


exports.getEntityTransfers = getEntityTransfers;

const getEntityTransfer = token => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/account/entity-transfers/${token}`));
/**
 * createEntityTransfer
 *
 *  Creates a pending Entity Transfer for one or more entities on
 *  the sender's account. Only unrestricted users can create a transfer.
 */


exports.getEntityTransfer = getEntityTransfer;

const createEntityTransfer = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setData)(data, _transfers.CreateTransferSchema), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/account/entity-transfers`));
/**
 * acceptEntityTransfer
 *
 * Accepts a transfer that has been created by a user on a different account.
 */


exports.createEntityTransfer = createEntityTransfer;

const acceptEntityTransfer = token => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/account/entity-transfers/${token}/accept`));
/**
 * cancelTransfer
 *
 * Cancels a pending transfer. Only unrestricted users on the account
 * that created the transfer are able to cancel it.
 *
 */


exports.acceptEntityTransfer = acceptEntityTransfer;

const cancelTransfer = token => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.BETA_API_ROOT}/account/entity-transfers/${token}`));

exports.cancelTransfer = cancelTransfer;