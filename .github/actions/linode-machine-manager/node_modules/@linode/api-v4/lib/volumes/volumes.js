"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createVolume = exports.updateVolume = exports.resizeVolume = exports.cloneVolume = exports.deleteVolume = exports.detachVolume = exports.attachVolume = exports.getVolumes = exports.getVolume = void 0;

var _volumes = require("@linode/validation/lib/volumes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getVolume
 *
 * Returns detailed information about a single Volume.
 *
 * @param volumeId { number } The ID of the volume to be retrieved.
 */
const getVolume = volumeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes/${volumeId}`), (0, _request.setMethod)('GET'));
/**
 * getVolumes
 *
 * Returns a paginated list of Volumes on your account.
 *
 */


exports.getVolume = getVolume;

const getVolumes = (params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * attachVolume
 *
 * Attaches a Volume on your Account to an existing Linode on your Account.
 * The Volume and Linode must both be in the same region.
 *
 * @param volumeId { number } The volume to be attached.
 * @param payload { Object }
 * @param payload.linode_id { number } The ID of the linode to attach the Volume to.
 * @param payload.config_id { number } The configuration profile to include this volume in.
 *   If this value is not provided, the most recently booted Config profile will be chosen.
 */


exports.getVolumes = getVolumes;

const attachVolume = (volumeId, payload) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes/${volumeId}/attach`), (0, _request.setMethod)('POST'), (0, _request.setData)(payload));
/**
 * detachVolume
 *
 * Detaches a Volume on your account from a Linode on your account.
 *
 * @param volumeId { number } The Volume to be detached.
 *
 */


exports.attachVolume = attachVolume;

const detachVolume = volumeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes/${volumeId}/detach`), (0, _request.setMethod)('POST'));
/**
 * deleteVolume
 *
 * Deletes a Volume on your account. This can only be done if the Volume
 * is not currently attached to a Linode.
 *
 * @param volumeId { number } The Volume to be detached.
 *
 */


exports.detachVolume = detachVolume;

const deleteVolume = volumeId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes/${volumeId}`), (0, _request.setMethod)('DELETE'));
/**
 * cloneVolume
 *
 * Creates a Volume on your Account. In order for this request to complete successfully,
 * your User must have the add_volumes grant.
 * The new Volume will have the same size and data as the source Volume
 *
 * @param volumeId { number } The Volume to be detached.
 * @param data { { label: string } } A label to identify the new volume.
 *
 */


exports.deleteVolume = deleteVolume;

const cloneVolume = (volumeId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes/${volumeId}/clone`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _volumes.CloneVolumeSchema));
/**
 * resizeVolume
 *
 * Resize an existing Volume on your Account. Volumes can only be resized up.
 *
 * @param volumeId { number } The Volume to be resized.
 * @param data { { size: number } } The size of the Volume (in GiB).
 *
 */


exports.cloneVolume = cloneVolume;

const resizeVolume = (volumeId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes/${volumeId}/resize`), (0, _request.setMethod)('POST'),
/**
 * Unless we require the old size, we wont be able to validate. We know 10 is the
 * absolute min so it's safe to set here.
 */
(0, _request.setData)(data, (0, _volumes.ResizeVolumeSchema)(10)));

exports.resizeVolume = resizeVolume;

/**
 * updateVolume
 *
 * Detaches a Volume on your account from a Linode on your account.
 *
 * @param volumeId { number } The Volume to be updated.
 * @param data { { label: string; tags: string[] } } The updated label for this Volume.
 *
 */
const updateVolume = (volumeId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes/${volumeId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _volumes.UpdateVolumeSchema));
/**
 * createVolume
 *
 * Creates a new Volume on your account.
 *
 * @param data { object } The size, label, and region of the new Volume. Can
 * also include a linode_id instead of a region to automatically attach the new Volume
 * to the target Linode.
 *
 */


exports.updateVolume = updateVolume;

const createVolume = data => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/volumes`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _volumes.CreateVolumeSchema));

exports.createVolume = createVolume;