"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recycleNode = exports.recycleAllNodes = exports.deleteNodePool = exports.updateNodePool = exports.createNodePool = exports.getNodePool = exports.getNodePools = void 0;

var _kubernetes = require("@linode/validation/lib/kubernetes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getNodePools
 *
 * Gets a list of all node pools associated with the specified cluster
 */
const getNodePools = (clusterID, params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/pools`));
/**
 * getNodePool
 *
 * Returns a single node pool
 */


exports.getNodePools = getNodePools;

const getNodePool = (clusterID, nodePoolID) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/pools/${nodePoolID}`));
/**
 * createNodePool
 *
 * Adds a node pool to the specified cluster.
 */


exports.getNodePool = getNodePool;

const createNodePool = (clusterID, data) => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/pools`), (0, _request.setData)(data, _kubernetes.nodePoolSchema));
/**
 * updateNodePool
 *
 * Change the type or count of a node pool
 */


exports.createNodePool = createNodePool;

const updateNodePool = (clusterID, nodePoolID, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/pools/${nodePoolID}`), (0, _request.setData)(data, _kubernetes.nodePoolSchema));
/**
 * deleteNodePool
 *
 * Delete a single node pool from the specified Cluster.
 */


exports.updateNodePool = updateNodePool;

const deleteNodePool = (clusterID, nodePoolID) => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/pools/${nodePoolID}`));
/**
 * recycleAllNodes
 *
 * Recycles all nodes from the specified Cluster.
 */


exports.deleteNodePool = deleteNodePool;

const recycleAllNodes = (clusterID, nodePoolID) => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/pools/${nodePoolID}/recycle`));
/**
 * recycleNode
 *
 * Recycles a single node by id.
 */


exports.recycleAllNodes = recycleAllNodes;

const recycleNode = (clusterID, nodeID) => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/nodes/${nodeID}/recycle`));

exports.recycleNode = recycleNode;