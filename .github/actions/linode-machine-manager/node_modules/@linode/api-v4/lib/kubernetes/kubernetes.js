"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.recycleClusterNodes = exports.getKubernetesClusterEndpoints = exports.getKubernetesVersion = exports.getKubernetesVersions = exports.getKubeConfig = exports.deleteKubernetesCluster = exports.updateKubernetesCluster = exports.createKubernetesCluster = exports.getKubernetesCluster = exports.getKubernetesClusters = void 0;

var _kubernetes = require("@linode/validation/lib/kubernetes.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getKubernetesClusters
 *
 * Gets a list of a user's Kubernetes clusters
 */
const getKubernetesClusters = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters`));
/**
 * getKubernetesCluster
 *
 * Return details about a single Kubernetes cluster
 */


exports.getKubernetesClusters = getKubernetesClusters;

const getKubernetesCluster = clusterID => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}`));
/**
 * createKubernetesClusters
 *
 * Create a new Cluster.
 */


exports.getKubernetesCluster = getKubernetesCluster;

const createKubernetesCluster = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters`), (0, _request.setData)(data, _kubernetes.createKubeClusterSchema));
/**
 * updateKubernetesCluster
 *
 * Create a new Cluster.
 */


exports.createKubernetesCluster = createKubernetesCluster;

const updateKubernetesCluster = (clusterID, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}`), (0, _request.setData)(data));
/**
 * deleteKubernetesCluster
 *
 * Delete the specified Cluster.
 */


exports.updateKubernetesCluster = updateKubernetesCluster;

const deleteKubernetesCluster = clusterID => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}`));
/** getKubeConfig
 *
 * Returns a base64 encoded string of a cluster's kubeconfig.yaml
 *
 * @param clusterId
 */


exports.deleteKubernetesCluster = deleteKubernetesCluster;

const getKubeConfig = clusterId => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterId}/kubeconfig`));
/** getKubernetesVersions
 *
 * Returns a paginated list of available Kubernetes versions.
 *
 */


exports.getKubeConfig = getKubeConfig;

const getKubernetesVersions = (params, filters) => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setXFilter)(filters), (0, _request.setParams)(params), (0, _request.setURL)(`${_constants.API_ROOT}/lke/versions`));
/** getKubernetesVersion
 *
 * Returns a single Kubernetes version by ID.
 *
 */


exports.getKubernetesVersions = getKubernetesVersions;

const getKubernetesVersion = versionID => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/versions/${versionID}`));
/** getKubernetesClusterEndpoint
 *
 * Returns the endpoint URL for a single Kubernetes cluster by ID.
 *
 */


exports.getKubernetesVersion = getKubernetesVersion;

const getKubernetesClusterEndpoints = clusterID => (0, _request.default)((0, _request.setMethod)('GET'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/api-endpoints`));
/** recycleClusterNodes
 *
 * Recycle all nodes in the target cluster (across all node pools)
 *
 */


exports.getKubernetesClusterEndpoints = getKubernetesClusterEndpoints;

const recycleClusterNodes = clusterID => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/lke/clusters/${clusterID}/recycle`));

exports.recycleClusterNodes = recycleClusterNodes;