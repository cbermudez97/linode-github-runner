"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uploadImage = exports.deleteImage = exports.updateImage = exports.createImage = exports.getImages = exports.getImage = void 0;

var _images = require("@linode/validation/lib/images.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/**
 * Get information about a single Image.
 *
 * @param imageId { string } ID of the Image to look up.
 */
const getImage = imageId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/images/${imageId}`), (0, _request.setMethod)('GET'));
/**
 * Returns a paginated list of Images.
 *
 */


exports.getImage = getImage;

const getImages = (params = {}, filters = {}) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/images`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * Create a private gold-master Image from a Linode Disk.
 *
 * @param diskId { number } The ID of the Linode Disk that this Image will be created from.
 * @param label { string } A short description of the Image. Labels cannot contain special characters.
 * @param description { string } A detailed description of this Image.
 */


exports.getImages = getImages;

const createImage = (diskId, label, description) => {
  const data = _objectSpread(_objectSpread({
    disk_id: diskId
  }, label && {
    label
  }), description && {
    description
  });

  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/images`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _images.createImageSchema));
};
/**
 * Updates a private Image that you have permission to read_write.
 *
 * @param imageId { string } ID of the Image to look up.
 * @param label { string } A short description of the Image. Labels cannot contain special characters.
 * @param description { string } A detailed description of this Image.
 */


exports.createImage = createImage;

const updateImage = (imageId, label, description) => {
  const data = _objectSpread(_objectSpread({}, label && {
    label
  }), description && {
    description
  });

  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/images/${imageId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _images.updateImageSchema));
};
/**
 * Delete a private Image you have permission to read_write.
 *
 * @param imageId { string } the ID of the image to delete
 */


exports.updateImage = updateImage;

const deleteImage = imageId => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/images/${imageId}`), (0, _request.setMethod)('DELETE'));
};
/**
 * uploadImage
 *
 * Create a pending Image
 *
 * The returned object includes an upload_to field to which
 * you can upload a pre-made Image that will be processed and
 * prepared for use.
 */


exports.deleteImage = deleteImage;

const uploadImage = data => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/images/upload`), (0, _request.setMethod)('POST'), (0, _request.setData)(data, _images.uploadImageSchema));
};

exports.uploadImage = uploadImage;