"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteNodeBalancerConfig = exports.updateNodeBalancerConfig = exports.createNodeBalancerConfig = exports.getNodeBalancerConfig = exports.getNodeBalancerConfigs = void 0;

var _nodebalancers = require("@linode/validation/lib/nodebalancers.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getNodeBalancerConfigs
 *
 * Returns a list of configuration profiles for the specified NodeBalancer.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer to view configs for.
 */
const getNodeBalancerConfigs = nodeBalancerId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}/configs`), (0, _request.setMethod)('GET'));
/**
 * getNodeBalancerConfig
 *
 * Returns a list of configuration profiles for the specified NodeBalancer.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer associated with the config.
 */


exports.getNodeBalancerConfigs = getNodeBalancerConfigs;

const getNodeBalancerConfig = (nodeBalancerId, configId) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}/configs/${configId}`), (0, _request.setMethod)('GET'));
/**
 * createNodeBalancerConfig
 *
 * Creates a NodeBalancer Config, which allows the NodeBalancer to accept traffic on a new port.
 * You will need to add NodeBalancer Nodes to the new Config before it can actually serve requests.
 *
 * @param nodeBalancerId { number } The NodeBalancer to receive the new config.
 */


exports.getNodeBalancerConfig = getNodeBalancerConfig;

const createNodeBalancerConfig = (nodeBalancerId, data) => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}/configs`), (0, _request.setData)(data, _nodebalancers.createNodeBalancerConfigSchema, _utils.combineConfigNodeAddressAndPort));
/**
 * updateNodeBalancerConfig
 *
 * Updates the configuration for a single port on a NodeBalancer.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer associated with the config.
 * @param configId { number } The ID of the configuration profile to be updated
 */


exports.createNodeBalancerConfig = createNodeBalancerConfig;

const updateNodeBalancerConfig = (nodeBalancerId, configId, data) => (0, _request.default)((0, _request.setMethod)('PUT'), (0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}/configs/${configId}`), (0, _request.setData)(data, _nodebalancers.UpdateNodeBalancerConfigSchema));
/**
 * deleteNodeBalancerConfig
 *
 * Delete a single NodeBalancer configuration profile.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer associated with the config.
 * @param configId { number } The ID of the configuration profile to be deleted.
 */


exports.updateNodeBalancerConfig = updateNodeBalancerConfig;

const deleteNodeBalancerConfig = (nodeBalancerId, configId) => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}/configs/${configId}`));

exports.deleteNodeBalancerConfig = deleteNodeBalancerConfig;