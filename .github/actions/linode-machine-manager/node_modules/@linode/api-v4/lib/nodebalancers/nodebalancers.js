"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getNodeBalancerStats = exports.deleteNodeBalancer = exports.createNodeBalancer = exports.updateNodeBalancer = exports.getNodeBalancer = exports.getNodeBalancers = void 0;

var _nodebalancers = require("@linode/validation/lib/nodebalancers.schema");

var _constants = require("../constants");

var _request = _interopRequireWildcard(require("../request"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * getNodeBalancers
 *
 * Returns a paginated list of NodeBalancers on your account.
 */
const getNodeBalancers = (params, filters) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers`), (0, _request.setMethod)('GET'), (0, _request.setParams)(params), (0, _request.setXFilter)(filters));
/**
 * getNodeBalancer
 *
 * Returns detailed information about a single NodeBalancer.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer to retrieve.
 */


exports.getNodeBalancers = getNodeBalancers;

const getNodeBalancer = nodeBalancerId => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}`), (0, _request.setMethod)('GET'));
/**
 * updateNodeBalancer
 *
 * Update an existing NodeBalancer on your account.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer to update.
 * @param data { object } The fields to update. Values not included in this
 * parameter will be left unchanged.
 */


exports.getNodeBalancer = getNodeBalancer;

const updateNodeBalancer = (nodeBalancerId, data) => (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}`), (0, _request.setMethod)('PUT'), (0, _request.setData)(data, _nodebalancers.UpdateNodeBalancerSchema));
/**
 * createNodeBalancer
 *
 * Add a NodeBalancer to your account.
 */


exports.updateNodeBalancer = updateNodeBalancer;

const createNodeBalancer = data => (0, _request.default)((0, _request.setMethod)('POST'), (0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers`), (0, _request.setData)(data, _nodebalancers.NodeBalancerSchema, _utils.combineNodeBalancerConfigNodeAddressAndPort));
/**
 * deleteNodeBalancer
 *
 * Remove a NodeBalancer from your account.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer to delete.
 */


exports.createNodeBalancer = createNodeBalancer;

const deleteNodeBalancer = nodeBalancerId => (0, _request.default)((0, _request.setMethod)('DELETE'), (0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}`));
/**
 * getNodeBalancerStats
 *
 * Returns detailed statistics about the requested NodeBalancer.
 *
 * @param nodeBalancerId { number } The ID of the NodeBalancer to view stats for.
 */


exports.deleteNodeBalancer = deleteNodeBalancer;

const getNodeBalancerStats = nodeBalancerId => {
  return (0, _request.default)((0, _request.setURL)(`${_constants.API_ROOT}/nodebalancers/${nodeBalancerId}/stats`), (0, _request.setMethod)('GET'));
};

exports.getNodeBalancerStats = getNodeBalancerStats;