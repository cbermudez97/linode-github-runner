"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeAddressAndPort = exports.combineNodeBalancerConfigNodeAddressAndPort = exports.combineConfigNodeAddressAndPort = void 0;

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const combineConfigNodeAddressAndPort = data => _objectSpread(_objectSpread({}, data), {}, {
  nodes: data.nodes.map(n => ({
    address: `${n.address}:${n.port}`,
    label: n.label,
    mode: n.mode,
    weight: n.weight
  }))
});

exports.combineConfigNodeAddressAndPort = combineConfigNodeAddressAndPort;

const combineNodeBalancerConfigNodeAddressAndPort = data => _objectSpread(_objectSpread({}, data), {}, {
  configs: data.configs.map(c => _objectSpread(_objectSpread({}, c), {}, {
    nodes: c.nodes.map(n => ({
      address: `${n.address}:${n.port}`,
      label: n.label,
      mode: n.mode,
      weight: n.weight
    }))
  }))
});

exports.combineNodeBalancerConfigNodeAddressAndPort = combineNodeBalancerConfigNodeAddressAndPort;

const mergeAddressAndPort = node => _objectSpread(_objectSpread({}, node), {}, {
  address: `${node.address}:${node.port}`
});

exports.mergeAddressAndPort = mergeAddressAndPort;